// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "envelope.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic envelope::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic envelope::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<89> envelope::ap_ST_fsm_state1 = "1";
const sc_lv<89> envelope::ap_ST_fsm_state2 = "10";
const sc_lv<89> envelope::ap_ST_fsm_state3 = "100";
const sc_lv<89> envelope::ap_ST_fsm_state4 = "1000";
const sc_lv<89> envelope::ap_ST_fsm_state5 = "10000";
const sc_lv<89> envelope::ap_ST_fsm_state6 = "100000";
const sc_lv<89> envelope::ap_ST_fsm_state7 = "1000000";
const sc_lv<89> envelope::ap_ST_fsm_state8 = "10000000";
const sc_lv<89> envelope::ap_ST_fsm_state9 = "100000000";
const sc_lv<89> envelope::ap_ST_fsm_state10 = "1000000000";
const sc_lv<89> envelope::ap_ST_fsm_state11 = "10000000000";
const sc_lv<89> envelope::ap_ST_fsm_state12 = "100000000000";
const sc_lv<89> envelope::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state69 = "100000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state70 = "1000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state71 = "10000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state72 = "100000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state73 = "1000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state74 = "10000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state75 = "100000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state76 = "1000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state77 = "10000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state78 = "100000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state79 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state80 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state81 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state82 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state83 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state84 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state85 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state86 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state87 = "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state88 = "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<89> envelope::ap_ST_fsm_state89 = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> envelope::ap_const_lv1_0 = "0";
const sc_lv<1> envelope::ap_const_lv1_1 = "1";
const sc_lv<2> envelope::ap_const_lv2_0 = "00";
const sc_lv<2> envelope::ap_const_lv2_2 = "10";
const sc_lv<2> envelope::ap_const_lv2_3 = "11";
const sc_lv<2> envelope::ap_const_lv2_1 = "1";
const sc_lv<32> envelope::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> envelope::ap_const_lv32_42 = "1000010";
const sc_lv<32> envelope::ap_const_lv32_57 = "1010111";
const sc_lv<32> envelope::ap_const_lv32_58 = "1011000";
const int envelope::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> envelope::ap_const_lv32_5 = "101";
const sc_lv<32> envelope::ap_const_lv32_1B = "11011";
const sc_lv<32> envelope::ap_const_lv32_31 = "110001";
const sc_lv<32> envelope::ap_const_lv32_49 = "1001001";
const sc_lv<32> envelope::ap_const_lv32_4D = "1001101";
const sc_lv<32> envelope::ap_const_lv32_52 = "1010010";
const sc_lv<32> envelope::ap_const_lv32_56 = "1010110";
const sc_lv<32> envelope::ap_const_lv32_15 = "10101";
const sc_lv<32> envelope::ap_const_lv32_2B = "101011";
const sc_lv<32> envelope::ap_const_lv32_41 = "1000001";
const sc_lv<32> envelope::ap_const_lv32_43 = "1000011";
const sc_lv<32> envelope::ap_const_lv32_44 = "1000100";
const sc_lv<32> envelope::ap_const_lv32_4A = "1001010";
const sc_lv<32> envelope::ap_const_lv32_4E = "1001110";
const sc_lv<32> envelope::ap_const_lv32_4F = "1001111";
const sc_lv<32> envelope::ap_const_lv32_40000000 = "1000000000000000000000000000000";
const sc_lv<32> envelope::ap_const_lv32_53 = "1010011";
const sc_lv<32> envelope::ap_const_lv32_6 = "110";
const sc_lv<32> envelope::ap_const_lv32_1C = "11100";
const sc_lv<32> envelope::ap_const_lv32_32 = "110010";
const sc_lv<32> envelope::ap_const_lv32_16 = "10110";
const sc_lv<32> envelope::ap_const_lv32_2C = "101100";
const sc_lv<32> envelope::ap_const_lv32_48 = "1001000";
const sc_lv<32> envelope::ap_const_lv32_FFFFFFFE = "11111111111111111111111111111110";
const sc_lv<32> envelope::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<32> envelope::ap_const_lv32_1 = "1";
const bool envelope::ap_const_boolean_1 = true;

envelope::envelope(sc_module_name name) : sc_module(name), mVcdFile(0) {
    envelope_CTRL_BUS_s_axi_U = new envelope_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("envelope_CTRL_BUS_s_axi_U");
    envelope_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    envelope_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    envelope_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    envelope_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    envelope_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    envelope_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    envelope_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    envelope_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    envelope_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    envelope_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    envelope_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    envelope_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    envelope_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    envelope_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    envelope_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    envelope_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    envelope_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    envelope_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    envelope_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    envelope_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    envelope_CTRL_BUS_s_axi_U->press(press);
    envelope_CTRL_BUS_s_axi_U->attackDuration(attackDuration);
    envelope_CTRL_BUS_s_axi_U->decayDuration(decayDuration);
    envelope_CTRL_BUS_s_axi_U->sustainAmplitude(sustainAmplitude);
    envelope_CTRL_BUS_s_axi_U->sustainDuration(sustainDuration);
    envelope_CTRL_BUS_s_axi_U->releaseDuration(releaseDuration);
    envelope_fadd_32nbkb_U1 = new envelope_fadd_32nbkb<1,5,32,32,32>("envelope_fadd_32nbkb_U1");
    envelope_fadd_32nbkb_U1->clk(ap_clk);
    envelope_fadd_32nbkb_U1->reset(ap_rst_n_inv);
    envelope_fadd_32nbkb_U1->din0(reg_210);
    envelope_fadd_32nbkb_U1->din1(grp_fu_176_p1);
    envelope_fadd_32nbkb_U1->ce(ap_var_for_const0);
    envelope_fadd_32nbkb_U1->dout(grp_fu_176_p2);
    envelope_fmul_32ncud_U2 = new envelope_fmul_32ncud<1,4,32,32,32>("envelope_fmul_32ncud_U2");
    envelope_fmul_32ncud_U2->clk(ap_clk);
    envelope_fmul_32ncud_U2->reset(ap_rst_n_inv);
    envelope_fmul_32ncud_U2->din0(grp_fu_181_p0);
    envelope_fmul_32ncud_U2->din1(grp_fu_181_p1);
    envelope_fmul_32ncud_U2->ce(ap_var_for_const0);
    envelope_fmul_32ncud_U2->dout(grp_fu_181_p2);
    envelope_fdiv_32ndEe_U3 = new envelope_fdiv_32ndEe<1,16,32,32,32>("envelope_fdiv_32ndEe_U3");
    envelope_fdiv_32ndEe_U3->clk(ap_clk);
    envelope_fdiv_32ndEe_U3->reset(ap_rst_n_inv);
    envelope_fdiv_32ndEe_U3->din0(grp_fu_185_p0);
    envelope_fdiv_32ndEe_U3->din1(grp_fu_185_p1);
    envelope_fdiv_32ndEe_U3->ce(ap_var_for_const0);
    envelope_fdiv_32ndEe_U3->dout(grp_fu_185_p2);
    envelope_sitofp_3eOg_U4 = new envelope_sitofp_3eOg<1,6,32,32>("envelope_sitofp_3eOg_U4");
    envelope_sitofp_3eOg_U4->clk(ap_clk);
    envelope_sitofp_3eOg_U4->reset(ap_rst_n_inv);
    envelope_sitofp_3eOg_U4->din0(grp_fu_190_p0);
    envelope_sitofp_3eOg_U4->ce(ap_var_for_const0);
    envelope_sitofp_3eOg_U4->dout(grp_fu_190_p1);
    envelope_sitofp_3eOg_U5 = new envelope_sitofp_3eOg<1,6,32,32>("envelope_sitofp_3eOg_U5");
    envelope_sitofp_3eOg_U5->clk(ap_clk);
    envelope_sitofp_3eOg_U5->reset(ap_rst_n_inv);
    envelope_sitofp_3eOg_U5->din0(grp_fu_194_p0);
    envelope_sitofp_3eOg_U5->ce(ap_var_for_const0);
    envelope_sitofp_3eOg_U5->dout(grp_fu_194_p1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state44);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state50);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state51);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state66);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state68);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state69);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state73);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state74);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state75);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state78);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state79);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state80);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state83);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state84);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state87);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state88);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state89);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_condition_327);
    sensitive << ( sel_tmp3_reg_846 );
    sensitive << ( sel_tmp8_reg_857 );
    sensitive << ( sel_tmp11_reg_863 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_176_p1);
    sensitive << ( reg_197 );
    sensitive << ( sel_tmp11_reg_863 );
    sensitive << ( ap_CS_fsm_state79 );
    sensitive << ( ap_condition_327 );

    SC_METHOD(thread_grp_fu_181_p0);
    sensitive << ( attackSlope );
    sensitive << ( decaySlope );
    sensitive << ( releaseSlope );
    sensitive << ( sel_tmp3_reg_846 );
    sensitive << ( sel_tmp8_reg_857 );
    sensitive << ( sel_tmp11_reg_863 );
    sensitive << ( tmp_9_reg_822 );
    sensitive << ( tmp_25_reg_790 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( ap_CS_fsm_state80 );
    sensitive << ( ap_CS_fsm_state84 );

    SC_METHOD(thread_grp_fu_181_p1);
    sensitive << ( reg_197 );
    sensitive << ( sel_tmp3_reg_846 );
    sensitive << ( sel_tmp8_reg_857 );
    sensitive << ( sel_tmp11_reg_863 );
    sensitive << ( reg_210 );
    sensitive << ( tmp_9_reg_822 );
    sensitive << ( reg_216 );
    sensitive << ( ap_CS_fsm_state75 );
    sensitive << ( tmp_10_reg_883 );
    sensitive << ( ap_CS_fsm_state80 );
    sensitive << ( ap_CS_fsm_state84 );

    SC_METHOD(thread_grp_fu_185_p0);
    sensitive << ( reg_197 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_grp_fu_185_p1);
    sensitive << ( reg_197 );
    sensitive << ( reg_205 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state51 );

    SC_METHOD(thread_grp_fu_190_p0);
    sensitive << ( attackDuration );
    sensitive << ( ap_CS_fsm_state74 );
    sensitive << ( sel_tmp3_reg_846 );
    sensitive << ( sel_tmp8_reg_857 );
    sensitive << ( sel_tmp11_reg_863 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( sustainAmplitude_rea_reg_699 );
    sensitive << ( tmp_4_i_reg_734 );
    sensitive << ( tmp_i_reg_748 );
    sensitive << ( time_loc_2_reg_812 );
    sensitive << ( tmp_13_reg_836 );
    sensitive << ( tmp_20_reg_841 );
    sensitive << ( ap_CS_fsm_state69 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state45 );
    sensitive << ( ap_CS_fsm_state73 );

    SC_METHOD(thread_grp_fu_194_p0);
    sensitive << ( tmp_6_i_reg_739 );
    sensitive << ( tmp_11_i_reg_753 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state45 );

    SC_METHOD(thread_guard_variable_for_e_1_load_fu_237_p1);
    sensitive << ( guard_variable_for_e_3 );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_guard_variable_for_e_2_load_fu_262_p1);
    sensitive << ( guard_variable_for_e_2 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_METHOD(thread_guard_variable_for_e_3_load_fu_287_p1);
    sensitive << ( guard_variable_for_e_1 );
    sensitive << ( ap_CS_fsm_state66 );

    SC_METHOD(thread_guard_variable_for_e_4_load_fu_302_p1);
    sensitive << ( guard_variable_for_e );
    sensitive << ( ap_CS_fsm_state66 );

    SC_METHOD(thread_guard_variable_for_e_load_fu_221_p1);
    sensitive << ( guard_variable_for_e_4 );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_not_or_cond_fu_644_p2);
    sensitive << ( or_cond2_fu_638_p2 );

    SC_METHOD(thread_not_sel_tmp1_fu_558_p2);
    sensitive << ( sel_tmp37_demorgan_fu_546_p2 );
    sensitive << ( tmp_23_not_fu_552_p2 );

    SC_METHOD(thread_not_sel_tmp_fu_540_p2);
    sensitive << ( sel_tmp30_demorgan_fu_530_p2 );
    sensitive << ( tmp_21_not_fu_534_p2 );

    SC_METHOD(thread_not_tmp_4_fu_340_p2);
    sensitive << ( tmp_4_fu_317_p2 );

    SC_METHOD(thread_not_tmp_s_fu_514_p2);
    sensitive << ( tmp_9_reg_822 );

    SC_METHOD(thread_or_cond1_fu_634_p2);
    sensitive << ( sel_tmp3_reg_846 );
    sensitive << ( tmp_9_reg_822 );

    SC_METHOD(thread_or_cond2_fu_638_p2);
    sensitive << ( or_cond_fu_630_p2 );
    sensitive << ( or_cond1_fu_634_p2 );

    SC_METHOD(thread_or_cond_fu_630_p2);
    sensitive << ( sel_tmp8_reg_857 );
    sensitive << ( sel_tmp11_reg_863 );

    SC_METHOD(thread_releaseTime_flag_1_fu_390_p2);
    sensitive << ( releaseTime_flag_reg_131 );
    sensitive << ( sel_tmp1_fu_385_p2 );

    SC_METHOD(thread_releaseTime_loc_1_fu_417_p3);
    sensitive << ( tmp_6_reg_776 );
    sensitive << ( releaseTime_loc_reg_143 );
    sensitive << ( sel_tmp9_fu_409_p3 );

    SC_METHOD(thread_releaseTime_new_1_fu_403_p3);
    sensitive << ( releaseDuration_read_reg_683 );
    sensitive << ( tmp_6_reg_776 );
    sensitive << ( sel_tmp5_fu_396_p3 );

    SC_METHOD(thread_resultAmplitude_5_fu_650_p3);
    sensitive << ( grp_fu_181_p2 );
    sensitive << ( tmp_9_reg_822 );

    SC_METHOD(thread_resultAmplitude_6_fu_657_p3);
    sensitive << ( sel_tmp3_reg_846 );
    sensitive << ( grp_fu_181_p2 );
    sensitive << ( resultAmplitude_5_fu_650_p3 );

    SC_METHOD(thread_resultAmplitude_7_fu_664_p3);
    sensitive << ( sel_tmp8_reg_857 );
    sensitive << ( grp_fu_181_p2 );
    sensitive << ( resultAmplitude_6_fu_657_p3 );

    SC_METHOD(thread_resultAmplitude_fu_671_p3);
    sensitive << ( sel_tmp11_reg_863 );
    sensitive << ( reg_210 );
    sensitive << ( resultAmplitude_7_reg_898 );

    SC_METHOD(thread_sel_tmp10_fu_588_p2);
    sensitive << ( sel_tmp37_demorgan_fu_546_p2 );

    SC_METHOD(thread_sel_tmp11_fu_594_p2);
    sensitive << ( tmp_19_fu_506_p2 );
    sensitive << ( sel_tmp10_fu_588_p2 );

    SC_METHOD(thread_sel_tmp1_fu_385_p2);
    sensitive << ( tmp_6_reg_776 );
    sensitive << ( tmp_8_fu_369_p2 );

    SC_METHOD(thread_sel_tmp2_fu_443_p3);
    sensitive << ( sustainTime_loc_reg_153 );
    sensitive << ( sel_tmp1_fu_385_p2 );
    sensitive << ( tmp_s_fu_373_p2 );

    SC_METHOD(thread_sel_tmp30_demorgan_fu_530_p2);
    sensitive << ( tmp_9_reg_822 );
    sensitive << ( tmp_12_reg_830 );

    SC_METHOD(thread_sel_tmp37_demorgan_fu_546_p2);
    sensitive << ( tmp_17_fu_502_p2 );
    sensitive << ( sel_tmp30_demorgan_fu_530_p2 );

    SC_METHOD(thread_sel_tmp3_fu_519_p2);
    sensitive << ( tmp_12_reg_830 );
    sensitive << ( not_tmp_s_fu_514_p2 );

    SC_METHOD(thread_sel_tmp4_fu_524_p2);
    sensitive << ( sel_tmp3_fu_519_p2 );
    sensitive << ( not_tmp_s_fu_514_p2 );

    SC_METHOD(thread_sel_tmp5_fu_396_p3);
    sensitive << ( releaseDuration_read_reg_683 );
    sensitive << ( sel_tmp1_fu_385_p2 );
    sensitive << ( tmp_1_fu_379_p2 );

    SC_METHOD(thread_sel_tmp6_fu_570_p2);
    sensitive << ( tmp1_fu_564_p2 );
    sensitive << ( sel_tmp4_fu_524_p2 );

    SC_METHOD(thread_sel_tmp7_fu_576_p2);
    sensitive << ( sel_tmp30_demorgan_fu_530_p2 );

    SC_METHOD(thread_sel_tmp8_fu_582_p2);
    sensitive << ( tmp_17_fu_502_p2 );
    sensitive << ( sel_tmp7_fu_576_p2 );

    SC_METHOD(thread_sel_tmp9_fu_409_p3);
    sensitive << ( releaseTime_loc_reg_143 );
    sensitive << ( sel_tmp1_fu_385_p2 );
    sensitive << ( tmp_1_fu_379_p2 );

    SC_METHOD(thread_sel_tmp_fu_430_p3);
    sensitive << ( sustainDuration_read_reg_691 );
    sensitive << ( sel_tmp1_fu_385_p2 );
    sensitive << ( tmp_s_fu_373_p2 );

    SC_METHOD(thread_sustainTime_flag_1_fu_424_p2);
    sensitive << ( sustainTime_flag_reg_163 );
    sensitive << ( sel_tmp1_fu_385_p2 );

    SC_METHOD(thread_sustainTime_loc_1_fu_451_p3);
    sensitive << ( tmp_6_reg_776 );
    sensitive << ( sustainTime_loc_reg_153 );
    sensitive << ( sel_tmp2_fu_443_p3 );

    SC_METHOD(thread_sustainTime_loc_phi_fu_156_p4);
    sensitive << ( sustainTime );
    sensitive << ( sustainDuration_read_reg_691 );
    sensitive << ( ap_CS_fsm_state66 );
    sensitive << ( guard_variable_for_e_4_load_fu_302_p1 );

    SC_METHOD(thread_sustainTime_loc_time_fu_332_p3);
    sensitive << ( time_r );
    sensitive << ( sustainTime_loc_phi_fu_156_p4 );
    sensitive << ( tmp_5_fu_326_p2 );

    SC_METHOD(thread_sustainTime_new_1_fu_437_p3);
    sensitive << ( sustainDuration_read_reg_691 );
    sensitive << ( tmp_6_reg_776 );
    sensitive << ( sel_tmp_fu_430_p3 );

    SC_METHOD(thread_time_loc_1_fu_346_p3);
    sensitive << ( time_r );
    sensitive << ( tmp_4_fu_317_p2 );
    sensitive << ( sustainTime_loc_time_fu_332_p3 );

    SC_METHOD(thread_time_loc_2_fu_481_p3);
    sensitive << ( time_loc_1_reg_770 );
    sensitive << ( tmp_3_fu_464_p2 );

    SC_METHOD(thread_tmp1_fu_564_p2);
    sensitive << ( not_sel_tmp_fu_540_p2 );
    sensitive << ( not_sel_tmp1_fu_558_p2 );

    SC_METHOD(thread_tmp_11_i_fu_271_p2);
    sensitive << ( releaseDuration_read_reg_683 );
    sensitive << ( sustainDuration_read_reg_691 );

    SC_METHOD(thread_tmp_12_fu_493_p2);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( decayDuration_read_reg_706 );
    sensitive << ( time_loc_2_fu_481_p3 );

    SC_METHOD(thread_tmp_13_fu_498_p2);
    sensitive << ( attackDuration_read_reg_712 );
    sensitive << ( time_loc_2_reg_812 );

    SC_METHOD(thread_tmp_17_fu_502_p2);
    sensitive << ( sustainTime_loc_1_reg_806 );
    sensitive << ( time_loc_2_reg_812 );
    sensitive << ( ap_CS_fsm_state68 );

    SC_METHOD(thread_tmp_19_fu_506_p2);
    sensitive << ( releaseTime_loc_1_reg_798 );
    sensitive << ( time_loc_2_reg_812 );
    sensitive << ( ap_CS_fsm_state68 );

    SC_METHOD(thread_tmp_1_fu_379_p2);
    sensitive << ( releaseTime_loc_reg_143 );

    SC_METHOD(thread_tmp_20_fu_510_p2);
    sensitive << ( sustainTime_loc_1_reg_806 );
    sensitive << ( time_loc_2_reg_812 );

    SC_METHOD(thread_tmp_21_not_fu_534_p2);
    sensitive << ( tmp_17_fu_502_p2 );

    SC_METHOD(thread_tmp_23_not_fu_552_p2);
    sensitive << ( tmp_19_fu_506_p2 );

    SC_METHOD(thread_tmp_24_fu_604_p2);
    sensitive << ( time_loc_2_reg_812 );

    SC_METHOD(thread_tmp_2_fu_458_p2);
    sensitive << ( wait_r );

    SC_METHOD(thread_tmp_3_fu_464_p2);
    sensitive << ( not_tmp_4_reg_764 );
    sensitive << ( tmp_2_fu_458_p2 );

    SC_METHOD(thread_tmp_4_fu_317_p2);
    sensitive << ( press_read_reg_720 );
    sensitive << ( ap_CS_fsm_state66 );

    SC_METHOD(thread_tmp_4_i_fu_241_p2);
    sensitive << ( sustainAmplitude_rea_reg_699 );

    SC_METHOD(thread_tmp_5_fu_326_p2);
    sensitive << ( time_r );
    sensitive << ( ap_CS_fsm_state66 );
    sensitive << ( sustainTime_loc_phi_fu_156_p4 );

    SC_METHOD(thread_tmp_6_fu_354_p2);
    sensitive << ( press_read_reg_720 );
    sensitive << ( ap_CS_fsm_state66 );

    SC_METHOD(thread_tmp_6_i_fu_246_p2);
    sensitive << ( decayDuration_read_reg_706 );
    sensitive << ( attackDuration_read_reg_712 );

    SC_METHOD(thread_tmp_7_fu_359_p2);
    sensitive << ( sustainTime_loc_phi_fu_156_p4 );

    SC_METHOD(thread_tmp_8_fu_369_p2);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( time_loc_1_reg_770 );
    sensitive << ( tmp_7_reg_785 );

    SC_METHOD(thread_tmp_9_fu_488_p2);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( attackDuration_read_reg_712 );
    sensitive << ( time_loc_2_fu_481_p3 );

    SC_METHOD(thread_tmp_i_fu_266_p2);
    sensitive << ( sustainAmplitude_rea_reg_699 );

    SC_METHOD(thread_tmp_s_fu_373_p2);
    sensitive << ( sustainTime_loc_reg_153 );

    SC_METHOD(thread_wait_flag_1_fu_600_p2);
    sensitive << ( not_tmp_4_reg_764 );
    sensitive << ( sel_tmp6_reg_852 );

    SC_METHOD(thread_wave_in_V_0_ack_in);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_in_V_0_ack_out);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state67 );

    SC_METHOD(thread_wave_in_V_0_data_out);
    sensitive << ( wave_in_V_0_payload_A );
    sensitive << ( wave_in_V_0_payload_B );
    sensitive << ( wave_in_V_0_sel );

    SC_METHOD(thread_wave_in_V_0_load_A);
    sensitive << ( wave_in_V_0_sel_wr );
    sensitive << ( wave_in_V_0_state_cmp_full );

    SC_METHOD(thread_wave_in_V_0_load_B);
    sensitive << ( wave_in_V_0_sel_wr );
    sensitive << ( wave_in_V_0_state_cmp_full );

    SC_METHOD(thread_wave_in_V_0_sel);
    sensitive << ( wave_in_V_0_sel_rd );

    SC_METHOD(thread_wave_in_V_0_state_cmp_full);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_in_V_0_vld_in);
    sensitive << ( wave_in_V_TVALID );

    SC_METHOD(thread_wave_in_V_0_vld_out);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_in_V_TDATA_blk_n);
    sensitive << ( wave_in_V_0_state );
    sensitive << ( ap_CS_fsm_state67 );

    SC_METHOD(thread_wave_in_V_TREADY);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_out_V_1_ack_in);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_wave_out_V_1_ack_out);
    sensitive << ( wave_out_V_TREADY );

    SC_METHOD(thread_wave_out_V_1_data_out);
    sensitive << ( wave_out_V_1_payload_A );
    sensitive << ( wave_out_V_1_payload_B );
    sensitive << ( wave_out_V_1_sel );

    SC_METHOD(thread_wave_out_V_1_load_A);
    sensitive << ( wave_out_V_1_sel_wr );
    sensitive << ( wave_out_V_1_state_cmp_full );

    SC_METHOD(thread_wave_out_V_1_load_B);
    sensitive << ( wave_out_V_1_sel_wr );
    sensitive << ( wave_out_V_1_state_cmp_full );

    SC_METHOD(thread_wave_out_V_1_sel);
    sensitive << ( wave_out_V_1_sel_rd );

    SC_METHOD(thread_wave_out_V_1_state_cmp_full);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_wave_out_V_1_vld_in);
    sensitive << ( wave_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state88 );

    SC_METHOD(thread_wave_out_V_1_vld_out);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_wave_out_V_TDATA);
    sensitive << ( wave_out_V_1_data_out );

    SC_METHOD(thread_wave_out_V_TDATA_blk_n);
    sensitive << ( wave_out_V_1_state );
    sensitive << ( ap_CS_fsm_state88 );
    sensitive << ( ap_CS_fsm_state89 );

    SC_METHOD(thread_wave_out_V_TVALID);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( wave_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state88 );
    sensitive << ( ap_CS_fsm_state89 );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( guard_variable_for_e_load_fu_221_p1 );
    sensitive << ( guard_variable_for_e_1_load_fu_237_p1 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( guard_variable_for_e_2_load_fu_262_p1 );
    sensitive << ( ap_CS_fsm_state44 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    wave_in_V_0_sel_rd = SC_LOGIC_0;
    wave_in_V_0_sel_wr = SC_LOGIC_0;
    wave_in_V_0_state = "00";
    wave_out_V_1_sel_rd = SC_LOGIC_0;
    wave_out_V_1_sel_wr = SC_LOGIC_0;
    wave_out_V_1_state = "00";
    guard_variable_for_e_4 = "0";
    attackSlope = "00000000000000000000000000000000";
    guard_variable_for_e_3 = "0";
    decaySlope = "00000000000000000000000000000000";
    guard_variable_for_e_2 = "0";
    releaseSlope = "00000000000000000000000000000000";
    guard_variable_for_e_1 = "0";
    releaseTime = "00000000000000000000000000000000";
    guard_variable_for_e = "0";
    sustainTime = "00000000000000000000000000000000";
    wait_r = "0";
    time_r = "00000000000000000000000000000000";
    ap_CS_fsm = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "envelope_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, wave_in_V_TDATA, "(port)wave_in_V_TDATA");
    sc_trace(mVcdFile, wave_in_V_TVALID, "(port)wave_in_V_TVALID");
    sc_trace(mVcdFile, wave_in_V_TREADY, "(port)wave_in_V_TREADY");
    sc_trace(mVcdFile, wave_out_V_TDATA, "(port)wave_out_V_TDATA");
    sc_trace(mVcdFile, wave_out_V_TVALID, "(port)wave_out_V_TVALID");
    sc_trace(mVcdFile, wave_out_V_TREADY, "(port)wave_out_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, wave_in_V_0_data_out, "wave_in_V_0_data_out");
    sc_trace(mVcdFile, wave_in_V_0_vld_in, "wave_in_V_0_vld_in");
    sc_trace(mVcdFile, wave_in_V_0_vld_out, "wave_in_V_0_vld_out");
    sc_trace(mVcdFile, wave_in_V_0_ack_in, "wave_in_V_0_ack_in");
    sc_trace(mVcdFile, wave_in_V_0_ack_out, "wave_in_V_0_ack_out");
    sc_trace(mVcdFile, wave_in_V_0_payload_A, "wave_in_V_0_payload_A");
    sc_trace(mVcdFile, wave_in_V_0_payload_B, "wave_in_V_0_payload_B");
    sc_trace(mVcdFile, wave_in_V_0_sel_rd, "wave_in_V_0_sel_rd");
    sc_trace(mVcdFile, wave_in_V_0_sel_wr, "wave_in_V_0_sel_wr");
    sc_trace(mVcdFile, wave_in_V_0_sel, "wave_in_V_0_sel");
    sc_trace(mVcdFile, wave_in_V_0_load_A, "wave_in_V_0_load_A");
    sc_trace(mVcdFile, wave_in_V_0_load_B, "wave_in_V_0_load_B");
    sc_trace(mVcdFile, wave_in_V_0_state, "wave_in_V_0_state");
    sc_trace(mVcdFile, wave_in_V_0_state_cmp_full, "wave_in_V_0_state_cmp_full");
    sc_trace(mVcdFile, wave_out_V_1_data_out, "wave_out_V_1_data_out");
    sc_trace(mVcdFile, wave_out_V_1_vld_in, "wave_out_V_1_vld_in");
    sc_trace(mVcdFile, wave_out_V_1_vld_out, "wave_out_V_1_vld_out");
    sc_trace(mVcdFile, wave_out_V_1_ack_in, "wave_out_V_1_ack_in");
    sc_trace(mVcdFile, wave_out_V_1_ack_out, "wave_out_V_1_ack_out");
    sc_trace(mVcdFile, wave_out_V_1_payload_A, "wave_out_V_1_payload_A");
    sc_trace(mVcdFile, wave_out_V_1_payload_B, "wave_out_V_1_payload_B");
    sc_trace(mVcdFile, wave_out_V_1_sel_rd, "wave_out_V_1_sel_rd");
    sc_trace(mVcdFile, wave_out_V_1_sel_wr, "wave_out_V_1_sel_wr");
    sc_trace(mVcdFile, wave_out_V_1_sel, "wave_out_V_1_sel");
    sc_trace(mVcdFile, wave_out_V_1_load_A, "wave_out_V_1_load_A");
    sc_trace(mVcdFile, wave_out_V_1_load_B, "wave_out_V_1_load_B");
    sc_trace(mVcdFile, wave_out_V_1_state, "wave_out_V_1_state");
    sc_trace(mVcdFile, wave_out_V_1_state_cmp_full, "wave_out_V_1_state_cmp_full");
    sc_trace(mVcdFile, press, "press");
    sc_trace(mVcdFile, attackDuration, "attackDuration");
    sc_trace(mVcdFile, decayDuration, "decayDuration");
    sc_trace(mVcdFile, sustainAmplitude, "sustainAmplitude");
    sc_trace(mVcdFile, sustainDuration, "sustainDuration");
    sc_trace(mVcdFile, releaseDuration, "releaseDuration");
    sc_trace(mVcdFile, guard_variable_for_e_4, "guard_variable_for_e_4");
    sc_trace(mVcdFile, attackSlope, "attackSlope");
    sc_trace(mVcdFile, guard_variable_for_e_3, "guard_variable_for_e_3");
    sc_trace(mVcdFile, decaySlope, "decaySlope");
    sc_trace(mVcdFile, guard_variable_for_e_2, "guard_variable_for_e_2");
    sc_trace(mVcdFile, releaseSlope, "releaseSlope");
    sc_trace(mVcdFile, guard_variable_for_e_1, "guard_variable_for_e_1");
    sc_trace(mVcdFile, releaseTime, "releaseTime");
    sc_trace(mVcdFile, guard_variable_for_e, "guard_variable_for_e");
    sc_trace(mVcdFile, sustainTime, "sustainTime");
    sc_trace(mVcdFile, wait_r, "wait_r");
    sc_trace(mVcdFile, time_r, "time_r");
    sc_trace(mVcdFile, wave_in_V_TDATA_blk_n, "wave_in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state67, "ap_CS_fsm_state67");
    sc_trace(mVcdFile, wave_out_V_TDATA_blk_n, "wave_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state88, "ap_CS_fsm_state88");
    sc_trace(mVcdFile, ap_CS_fsm_state89, "ap_CS_fsm_state89");
    sc_trace(mVcdFile, grp_fu_190_p1, "grp_fu_190_p1");
    sc_trace(mVcdFile, reg_197, "reg_197");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, ap_CS_fsm_state50, "ap_CS_fsm_state50");
    sc_trace(mVcdFile, ap_CS_fsm_state74, "ap_CS_fsm_state74");
    sc_trace(mVcdFile, sel_tmp3_reg_846, "sel_tmp3_reg_846");
    sc_trace(mVcdFile, sel_tmp8_reg_857, "sel_tmp8_reg_857");
    sc_trace(mVcdFile, sel_tmp11_reg_863, "sel_tmp11_reg_863");
    sc_trace(mVcdFile, ap_CS_fsm_state78, "ap_CS_fsm_state78");
    sc_trace(mVcdFile, grp_fu_194_p1, "grp_fu_194_p1");
    sc_trace(mVcdFile, reg_205, "reg_205");
    sc_trace(mVcdFile, grp_fu_181_p2, "grp_fu_181_p2");
    sc_trace(mVcdFile, reg_210, "reg_210");
    sc_trace(mVcdFile, ap_CS_fsm_state83, "ap_CS_fsm_state83");
    sc_trace(mVcdFile, tmp_9_reg_822, "tmp_9_reg_822");
    sc_trace(mVcdFile, ap_CS_fsm_state87, "ap_CS_fsm_state87");
    sc_trace(mVcdFile, grp_fu_176_p2, "grp_fu_176_p2");
    sc_trace(mVcdFile, reg_216, "reg_216");
    sc_trace(mVcdFile, releaseDuration_read_reg_683, "releaseDuration_read_reg_683");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sustainDuration_read_reg_691, "sustainDuration_read_reg_691");
    sc_trace(mVcdFile, sustainAmplitude_rea_reg_699, "sustainAmplitude_rea_reg_699");
    sc_trace(mVcdFile, decayDuration_read_reg_706, "decayDuration_read_reg_706");
    sc_trace(mVcdFile, attackDuration_read_reg_712, "attackDuration_read_reg_712");
    sc_trace(mVcdFile, press_read_reg_720, "press_read_reg_720");
    sc_trace(mVcdFile, guard_variable_for_e_load_fu_221_p1, "guard_variable_for_e_load_fu_221_p1");
    sc_trace(mVcdFile, guard_variable_for_e_reg_726, "guard_variable_for_e_reg_726");
    sc_trace(mVcdFile, guard_variable_for_e_1_load_fu_237_p1, "guard_variable_for_e_1_load_fu_237_p1");
    sc_trace(mVcdFile, guard_variable_for_e_1_reg_730, "guard_variable_for_e_1_reg_730");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, tmp_4_i_fu_241_p2, "tmp_4_i_fu_241_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_734, "tmp_4_i_reg_734");
    sc_trace(mVcdFile, tmp_6_i_fu_246_p2, "tmp_6_i_fu_246_p2");
    sc_trace(mVcdFile, tmp_6_i_reg_739, "tmp_6_i_reg_739");
    sc_trace(mVcdFile, guard_variable_for_e_2_load_fu_262_p1, "guard_variable_for_e_2_load_fu_262_p1");
    sc_trace(mVcdFile, guard_variable_for_e_2_reg_744, "guard_variable_for_e_2_reg_744");
    sc_trace(mVcdFile, ap_CS_fsm_state44, "ap_CS_fsm_state44");
    sc_trace(mVcdFile, tmp_i_fu_266_p2, "tmp_i_fu_266_p2");
    sc_trace(mVcdFile, tmp_i_reg_748, "tmp_i_reg_748");
    sc_trace(mVcdFile, tmp_11_i_fu_271_p2, "tmp_11_i_fu_271_p2");
    sc_trace(mVcdFile, tmp_11_i_reg_753, "tmp_11_i_reg_753");
    sc_trace(mVcdFile, not_tmp_4_fu_340_p2, "not_tmp_4_fu_340_p2");
    sc_trace(mVcdFile, not_tmp_4_reg_764, "not_tmp_4_reg_764");
    sc_trace(mVcdFile, ap_CS_fsm_state66, "ap_CS_fsm_state66");
    sc_trace(mVcdFile, time_loc_1_fu_346_p3, "time_loc_1_fu_346_p3");
    sc_trace(mVcdFile, time_loc_1_reg_770, "time_loc_1_reg_770");
    sc_trace(mVcdFile, tmp_6_fu_354_p2, "tmp_6_fu_354_p2");
    sc_trace(mVcdFile, tmp_6_reg_776, "tmp_6_reg_776");
    sc_trace(mVcdFile, tmp_7_fu_359_p2, "tmp_7_fu_359_p2");
    sc_trace(mVcdFile, tmp_7_reg_785, "tmp_7_reg_785");
    sc_trace(mVcdFile, tmp_25_reg_790, "tmp_25_reg_790");
    sc_trace(mVcdFile, releaseTime_loc_1_fu_417_p3, "releaseTime_loc_1_fu_417_p3");
    sc_trace(mVcdFile, releaseTime_loc_1_reg_798, "releaseTime_loc_1_reg_798");
    sc_trace(mVcdFile, sustainTime_loc_1_fu_451_p3, "sustainTime_loc_1_fu_451_p3");
    sc_trace(mVcdFile, sustainTime_loc_1_reg_806, "sustainTime_loc_1_reg_806");
    sc_trace(mVcdFile, time_loc_2_fu_481_p3, "time_loc_2_fu_481_p3");
    sc_trace(mVcdFile, time_loc_2_reg_812, "time_loc_2_reg_812");
    sc_trace(mVcdFile, tmp_9_fu_488_p2, "tmp_9_fu_488_p2");
    sc_trace(mVcdFile, tmp_12_fu_493_p2, "tmp_12_fu_493_p2");
    sc_trace(mVcdFile, tmp_12_reg_830, "tmp_12_reg_830");
    sc_trace(mVcdFile, tmp_13_fu_498_p2, "tmp_13_fu_498_p2");
    sc_trace(mVcdFile, tmp_13_reg_836, "tmp_13_reg_836");
    sc_trace(mVcdFile, ap_CS_fsm_state68, "ap_CS_fsm_state68");
    sc_trace(mVcdFile, tmp_20_fu_510_p2, "tmp_20_fu_510_p2");
    sc_trace(mVcdFile, tmp_20_reg_841, "tmp_20_reg_841");
    sc_trace(mVcdFile, sel_tmp3_fu_519_p2, "sel_tmp3_fu_519_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_570_p2, "sel_tmp6_fu_570_p2");
    sc_trace(mVcdFile, sel_tmp6_reg_852, "sel_tmp6_reg_852");
    sc_trace(mVcdFile, sel_tmp8_fu_582_p2, "sel_tmp8_fu_582_p2");
    sc_trace(mVcdFile, sel_tmp11_fu_594_p2, "sel_tmp11_fu_594_p2");
    sc_trace(mVcdFile, wait_flag_1_fu_600_p2, "wait_flag_1_fu_600_p2");
    sc_trace(mVcdFile, wait_flag_1_reg_869, "wait_flag_1_reg_869");
    sc_trace(mVcdFile, ap_CS_fsm_state69, "ap_CS_fsm_state69");
    sc_trace(mVcdFile, ap_CS_fsm_state75, "ap_CS_fsm_state75");
    sc_trace(mVcdFile, tmp_10_reg_883, "tmp_10_reg_883");
    sc_trace(mVcdFile, ap_CS_fsm_state79, "ap_CS_fsm_state79");
    sc_trace(mVcdFile, ap_CS_fsm_state80, "ap_CS_fsm_state80");
    sc_trace(mVcdFile, not_or_cond_fu_644_p2, "not_or_cond_fu_644_p2");
    sc_trace(mVcdFile, not_or_cond_reg_893, "not_or_cond_reg_893");
    sc_trace(mVcdFile, resultAmplitude_7_fu_664_p3, "resultAmplitude_7_fu_664_p3");
    sc_trace(mVcdFile, resultAmplitude_7_reg_898, "resultAmplitude_7_reg_898");
    sc_trace(mVcdFile, resultAmplitude_fu_671_p3, "resultAmplitude_fu_671_p3");
    sc_trace(mVcdFile, releaseTime_flag_reg_131, "releaseTime_flag_reg_131");
    sc_trace(mVcdFile, guard_variable_for_e_3_load_fu_287_p1, "guard_variable_for_e_3_load_fu_287_p1");
    sc_trace(mVcdFile, releaseTime_loc_reg_143, "releaseTime_loc_reg_143");
    sc_trace(mVcdFile, sustainTime_loc_phi_fu_156_p4, "sustainTime_loc_phi_fu_156_p4");
    sc_trace(mVcdFile, sustainTime_loc_reg_153, "sustainTime_loc_reg_153");
    sc_trace(mVcdFile, guard_variable_for_e_4_load_fu_302_p1, "guard_variable_for_e_4_load_fu_302_p1");
    sc_trace(mVcdFile, sustainTime_flag_reg_163, "sustainTime_flag_reg_163");
    sc_trace(mVcdFile, grp_fu_185_p2, "grp_fu_185_p2");
    sc_trace(mVcdFile, releaseTime_new_1_fu_403_p3, "releaseTime_new_1_fu_403_p3");
    sc_trace(mVcdFile, releaseTime_flag_1_fu_390_p2, "releaseTime_flag_1_fu_390_p2");
    sc_trace(mVcdFile, sustainTime_new_1_fu_437_p3, "sustainTime_new_1_fu_437_p3");
    sc_trace(mVcdFile, sustainTime_flag_1_fu_424_p2, "sustainTime_flag_1_fu_424_p2");
    sc_trace(mVcdFile, tmp_24_fu_604_p2, "tmp_24_fu_604_p2");
    sc_trace(mVcdFile, grp_fu_176_p1, "grp_fu_176_p1");
    sc_trace(mVcdFile, grp_fu_181_p0, "grp_fu_181_p0");
    sc_trace(mVcdFile, grp_fu_181_p1, "grp_fu_181_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state84, "ap_CS_fsm_state84");
    sc_trace(mVcdFile, grp_fu_185_p0, "grp_fu_185_p0");
    sc_trace(mVcdFile, grp_fu_185_p1, "grp_fu_185_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state51, "ap_CS_fsm_state51");
    sc_trace(mVcdFile, grp_fu_190_p0, "grp_fu_190_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, ap_CS_fsm_state73, "ap_CS_fsm_state73");
    sc_trace(mVcdFile, grp_fu_194_p0, "grp_fu_194_p0");
    sc_trace(mVcdFile, tmp_5_fu_326_p2, "tmp_5_fu_326_p2");
    sc_trace(mVcdFile, tmp_4_fu_317_p2, "tmp_4_fu_317_p2");
    sc_trace(mVcdFile, sustainTime_loc_time_fu_332_p3, "sustainTime_loc_time_fu_332_p3");
    sc_trace(mVcdFile, tmp_8_fu_369_p2, "tmp_8_fu_369_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_385_p2, "sel_tmp1_fu_385_p2");
    sc_trace(mVcdFile, tmp_1_fu_379_p2, "tmp_1_fu_379_p2");
    sc_trace(mVcdFile, sel_tmp5_fu_396_p3, "sel_tmp5_fu_396_p3");
    sc_trace(mVcdFile, sel_tmp9_fu_409_p3, "sel_tmp9_fu_409_p3");
    sc_trace(mVcdFile, tmp_s_fu_373_p2, "tmp_s_fu_373_p2");
    sc_trace(mVcdFile, sel_tmp_fu_430_p3, "sel_tmp_fu_430_p3");
    sc_trace(mVcdFile, sel_tmp2_fu_443_p3, "sel_tmp2_fu_443_p3");
    sc_trace(mVcdFile, tmp_2_fu_458_p2, "tmp_2_fu_458_p2");
    sc_trace(mVcdFile, tmp_3_fu_464_p2, "tmp_3_fu_464_p2");
    sc_trace(mVcdFile, not_tmp_s_fu_514_p2, "not_tmp_s_fu_514_p2");
    sc_trace(mVcdFile, tmp_17_fu_502_p2, "tmp_17_fu_502_p2");
    sc_trace(mVcdFile, sel_tmp30_demorgan_fu_530_p2, "sel_tmp30_demorgan_fu_530_p2");
    sc_trace(mVcdFile, tmp_21_not_fu_534_p2, "tmp_21_not_fu_534_p2");
    sc_trace(mVcdFile, tmp_19_fu_506_p2, "tmp_19_fu_506_p2");
    sc_trace(mVcdFile, sel_tmp37_demorgan_fu_546_p2, "sel_tmp37_demorgan_fu_546_p2");
    sc_trace(mVcdFile, tmp_23_not_fu_552_p2, "tmp_23_not_fu_552_p2");
    sc_trace(mVcdFile, not_sel_tmp_fu_540_p2, "not_sel_tmp_fu_540_p2");
    sc_trace(mVcdFile, not_sel_tmp1_fu_558_p2, "not_sel_tmp1_fu_558_p2");
    sc_trace(mVcdFile, tmp1_fu_564_p2, "tmp1_fu_564_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_524_p2, "sel_tmp4_fu_524_p2");
    sc_trace(mVcdFile, sel_tmp7_fu_576_p2, "sel_tmp7_fu_576_p2");
    sc_trace(mVcdFile, sel_tmp10_fu_588_p2, "sel_tmp10_fu_588_p2");
    sc_trace(mVcdFile, or_cond_fu_630_p2, "or_cond_fu_630_p2");
    sc_trace(mVcdFile, or_cond1_fu_634_p2, "or_cond1_fu_634_p2");
    sc_trace(mVcdFile, or_cond2_fu_638_p2, "or_cond2_fu_638_p2");
    sc_trace(mVcdFile, resultAmplitude_5_fu_650_p3, "resultAmplitude_5_fu_650_p3");
    sc_trace(mVcdFile, resultAmplitude_6_fu_657_p3, "resultAmplitude_6_fu_657_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_condition_327, "ap_condition_327");
#endif

    }
    mHdltvinHandle.open("envelope.hdltvin.dat");
    mHdltvoutHandle.open("envelope.hdltvout.dat");
}

envelope::~envelope() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete envelope_CTRL_BUS_s_axi_U;
    delete envelope_fadd_32nbkb_U1;
    delete envelope_fmul_32ncud_U2;
    delete envelope_fdiv_32ndEe_U3;
    delete envelope_sitofp_3eOg_U4;
    delete envelope_sitofp_3eOg_U5;
}

void envelope::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void envelope::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_3_load_fu_287_p1.read())) {
            releaseTime_flag_reg_131 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_3_load_fu_287_p1.read())) {
            releaseTime_flag_reg_131 = ap_const_lv1_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_3_load_fu_287_p1.read())) {
            releaseTime_loc_reg_143 = releaseTime.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_3_load_fu_287_p1.read())) {
            releaseTime_loc_reg_143 = releaseDuration_read_reg_683.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_4_load_fu_302_p1.read())) {
            sustainTime_flag_reg_163 = ap_const_lv1_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_4_load_fu_302_p1.read())) {
            sustainTime_flag_reg_163 = ap_const_lv1_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_4_load_fu_302_p1.read())) {
            sustainTime_loc_reg_153 = sustainTime.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_4_load_fu_302_p1.read())) {
            sustainTime_loc_reg_153 = sustainDuration_read_reg_691.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_in_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_out.read()))) {
            wave_in_V_0_sel_rd =  (sc_logic) (~wave_in_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_in_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_in.read()))) {
            wave_in_V_0_sel_wr =  (sc_logic) (~wave_in_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_in_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_2)))) {
            wave_in_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_1)))) {
            wave_in_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()))))) {
            wave_in_V_0_state = ap_const_lv2_3;
        } else {
            wave_in_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_out.read()))) {
            wave_out_V_1_sel_rd =  (sc_logic) (~wave_out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_in.read()))) {
            wave_out_V_1_sel_wr =  (sc_logic) (~wave_out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, wave_out_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, wave_out_V_1_state.read())))) {
            wave_out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, wave_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, wave_out_V_1_state.read())))) {
            wave_out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, wave_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, wave_out_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, wave_out_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()))))) {
            wave_out_V_1_state = ap_const_lv2_3;
        } else {
            wave_out_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        attackDuration_read_reg_712 = attackDuration.read();
        decayDuration_read_reg_706 = decayDuration.read();
        guard_variable_for_e_reg_726 = guard_variable_for_e_4.read();
        press_read_reg_720 = press.read();
        releaseDuration_read_reg_683 = releaseDuration.read();
        sustainAmplitude_rea_reg_699 = sustainAmplitude.read();
        sustainDuration_read_reg_691 = sustainDuration.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_reg_726.read()))) {
        attackSlope = grp_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_1_reg_730.read()))) {
        decaySlope = grp_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_4_load_fu_302_p1.read()))) {
        guard_variable_for_e = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_3_load_fu_287_p1.read()))) {
        guard_variable_for_e_1 = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        guard_variable_for_e_1_reg_730 = guard_variable_for_e_3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_2_load_fu_262_p1.read()))) {
        guard_variable_for_e_2 = ap_const_lv1_1;
        tmp_11_i_reg_753 = tmp_11_i_fu_271_p2.read();
        tmp_i_reg_748 = tmp_i_fu_266_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read())) {
        guard_variable_for_e_2_reg_744 = guard_variable_for_e_2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_1_load_fu_237_p1.read()))) {
        guard_variable_for_e_3 = ap_const_lv1_1;
        tmp_4_i_reg_734 = tmp_4_i_fu_241_p2.read();
        tmp_6_i_reg_739 = tmp_6_i_fu_246_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_load_fu_221_p1.read()))) {
        guard_variable_for_e_4 = ap_const_lv1_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read())) {
        not_or_cond_reg_893 = not_or_cond_fu_644_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        not_tmp_4_reg_764 = not_tmp_4_fu_340_p2.read();
        time_loc_1_reg_770 = time_loc_1_fu_346_p3.read();
        tmp_6_reg_776 = tmp_6_fu_354_p2.read();
        tmp_7_reg_785 = tmp_7_fu_359_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state74.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state74.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read())) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read()))) {
        reg_197 = grp_fu_190_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state50.read()))) {
        reg_205 = grp_fu_194_p1.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state78.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_reg_822.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_846.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read())))) {
        reg_210 = grp_fu_181_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state83.read())))) {
        reg_216 = grp_fu_176_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_2_reg_744.read()))) {
        releaseSlope = grp_fu_185_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, releaseTime_flag_1_fu_390_p2.read()))) {
        releaseTime = releaseTime_new_1_fu_403_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1))) {
        releaseTime_loc_1_reg_798 = releaseTime_loc_1_fu_417_p3.read();
        sustainTime_loc_1_reg_806 = sustainTime_loc_1_fu_451_p3.read();
        time_loc_2_reg_812 = time_loc_2_fu_481_p3.read();
        tmp_12_reg_830 = tmp_12_fu_493_p2.read();
        tmp_25_reg_790 = wave_in_V_0_data_out.read();
        tmp_9_reg_822 = tmp_9_fu_488_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state87.read()))) {
        resultAmplitude_7_reg_898 = resultAmplitude_7_fu_664_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read())) {
        sel_tmp11_reg_863 = sel_tmp11_fu_594_p2.read();
        sel_tmp3_reg_846 = sel_tmp3_fu_519_p2.read();
        sel_tmp6_reg_852 = sel_tmp6_fu_570_p2.read();
        sel_tmp8_reg_857 = sel_tmp8_fu_582_p2.read();
        tmp_13_reg_836 = tmp_13_fu_498_p2.read();
        tmp_20_reg_841 = tmp_20_fu_510_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, sustainTime_flag_1_fu_424_p2.read()))) {
        sustainTime = sustainTime_new_1_fu_437_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state74.read())) {
        time_r = tmp_24_fu_604_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_reg_822.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_846.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read()))) {
        tmp_10_reg_883 = grp_fu_190_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read())) {
        wait_flag_1_reg_869 = wait_flag_1_fu_600_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()) && esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, wait_flag_1_reg_869.read()))) {
        wait_r = not_or_cond_reg_893.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_load_A.read())) {
        wave_in_V_0_payload_A = wave_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_load_B.read())) {
        wave_in_V_0_payload_B = wave_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_load_A.read())) {
        wave_out_V_1_payload_A = resultAmplitude_fu_671_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_load_B.read())) {
        wave_out_V_1_payload_B = resultAmplitude_fu_671_p3.read();
    }
}

void envelope::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void envelope::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void envelope::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void envelope::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void envelope::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void envelope::thread_ap_CS_fsm_state44() {
    ap_CS_fsm_state44 = ap_CS_fsm.read()[43];
}

void envelope::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void envelope::thread_ap_CS_fsm_state50() {
    ap_CS_fsm_state50 = ap_CS_fsm.read()[49];
}

void envelope::thread_ap_CS_fsm_state51() {
    ap_CS_fsm_state51 = ap_CS_fsm.read()[50];
}

void envelope::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void envelope::thread_ap_CS_fsm_state66() {
    ap_CS_fsm_state66 = ap_CS_fsm.read()[65];
}

void envelope::thread_ap_CS_fsm_state67() {
    ap_CS_fsm_state67 = ap_CS_fsm.read()[66];
}

void envelope::thread_ap_CS_fsm_state68() {
    ap_CS_fsm_state68 = ap_CS_fsm.read()[67];
}

void envelope::thread_ap_CS_fsm_state69() {
    ap_CS_fsm_state69 = ap_CS_fsm.read()[68];
}

void envelope::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void envelope::thread_ap_CS_fsm_state73() {
    ap_CS_fsm_state73 = ap_CS_fsm.read()[72];
}

void envelope::thread_ap_CS_fsm_state74() {
    ap_CS_fsm_state74 = ap_CS_fsm.read()[73];
}

void envelope::thread_ap_CS_fsm_state75() {
    ap_CS_fsm_state75 = ap_CS_fsm.read()[74];
}

void envelope::thread_ap_CS_fsm_state78() {
    ap_CS_fsm_state78 = ap_CS_fsm.read()[77];
}

void envelope::thread_ap_CS_fsm_state79() {
    ap_CS_fsm_state79 = ap_CS_fsm.read()[78];
}

void envelope::thread_ap_CS_fsm_state80() {
    ap_CS_fsm_state80 = ap_CS_fsm.read()[79];
}

void envelope::thread_ap_CS_fsm_state83() {
    ap_CS_fsm_state83 = ap_CS_fsm.read()[82];
}

void envelope::thread_ap_CS_fsm_state84() {
    ap_CS_fsm_state84 = ap_CS_fsm.read()[83];
}

void envelope::thread_ap_CS_fsm_state87() {
    ap_CS_fsm_state87 = ap_CS_fsm.read()[86];
}

void envelope::thread_ap_CS_fsm_state88() {
    ap_CS_fsm_state88 = ap_CS_fsm.read()[87];
}

void envelope::thread_ap_CS_fsm_state89() {
    ap_CS_fsm_state89 = ap_CS_fsm.read()[88];
}

void envelope::thread_ap_condition_327() {
    ap_condition_327 = (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()));
}

void envelope::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void envelope::thread_grp_fu_176_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state79.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read())) {
            grp_fu_176_p1 = reg_197.read();
        } else if (esl_seteq<1,1,1>(ap_condition_327.read(), ap_const_boolean_1)) {
            grp_fu_176_p1 = ap_const_lv32_40000000;
        } else {
            grp_fu_176_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        grp_fu_176_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_181_p0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_reg_822.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_846.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp8_reg_857.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read())))) {
        grp_fu_181_p0 = tmp_25_reg_790.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state80.read())) {
        grp_fu_181_p0 = attackSlope.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()))) {
        grp_fu_181_p0 = releaseSlope.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read()))) {
        grp_fu_181_p0 = decaySlope.read();
    } else {
        grp_fu_181_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_181_p1() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read())))) {
        grp_fu_181_p1 = reg_216.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_9_reg_822.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_846.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()))) {
        grp_fu_181_p1 = reg_210.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state80.read())) {
        grp_fu_181_p1 = tmp_10_reg_883.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state75.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state84.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp8_reg_857.read())))) {
        grp_fu_181_p1 = reg_197.read();
    } else {
        grp_fu_181_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_185_p0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        grp_fu_185_p0 = reg_197.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_185_p0 = ap_const_lv32_40000000;
    } else {
        grp_fu_185_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_185_p1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state51.read()))) {
        grp_fu_185_p1 = reg_205.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        grp_fu_185_p1 = reg_197.read();
    } else {
        grp_fu_185_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_190_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state74.read())) {
        grp_fu_190_p0 = time_loc_2_reg_812.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state73.read())) {
        grp_fu_190_p0 = sustainAmplitude_rea_reg_699.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp11_reg_863.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()))) {
        grp_fu_190_p0 = tmp_20_reg_841.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_846.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp8_reg_857.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp11_reg_863.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state69.read()))) {
        grp_fu_190_p0 = tmp_13_reg_836.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        grp_fu_190_p0 = tmp_i_reg_748.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_190_p0 = tmp_4_i_reg_734.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        grp_fu_190_p0 = attackDuration.read();
    } else {
        grp_fu_190_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_194_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        grp_fu_194_p0 = tmp_11_i_reg_753.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_fu_194_p0 = tmp_6_i_reg_739.read();
    } else {
        grp_fu_194_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_guard_variable_for_e_1_load_fu_237_p1() {
    guard_variable_for_e_1_load_fu_237_p1 = guard_variable_for_e_3.read();
}

void envelope::thread_guard_variable_for_e_2_load_fu_262_p1() {
    guard_variable_for_e_2_load_fu_262_p1 = guard_variable_for_e_2.read();
}

void envelope::thread_guard_variable_for_e_3_load_fu_287_p1() {
    guard_variable_for_e_3_load_fu_287_p1 = guard_variable_for_e_1.read();
}

void envelope::thread_guard_variable_for_e_4_load_fu_302_p1() {
    guard_variable_for_e_4_load_fu_302_p1 = guard_variable_for_e.read();
}

void envelope::thread_guard_variable_for_e_load_fu_221_p1() {
    guard_variable_for_e_load_fu_221_p1 = guard_variable_for_e_4.read();
}

void envelope::thread_not_or_cond_fu_644_p2() {
    not_or_cond_fu_644_p2 = (or_cond2_fu_638_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_not_sel_tmp1_fu_558_p2() {
    not_sel_tmp1_fu_558_p2 = (sel_tmp37_demorgan_fu_546_p2.read() | tmp_23_not_fu_552_p2.read());
}

void envelope::thread_not_sel_tmp_fu_540_p2() {
    not_sel_tmp_fu_540_p2 = (sel_tmp30_demorgan_fu_530_p2.read() | tmp_21_not_fu_534_p2.read());
}

void envelope::thread_not_tmp_4_fu_340_p2() {
    not_tmp_4_fu_340_p2 = (tmp_4_fu_317_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_not_tmp_s_fu_514_p2() {
    not_tmp_s_fu_514_p2 = (tmp_9_reg_822.read() ^ ap_const_lv1_1);
}

void envelope::thread_or_cond1_fu_634_p2() {
    or_cond1_fu_634_p2 = (sel_tmp3_reg_846.read() | tmp_9_reg_822.read());
}

void envelope::thread_or_cond2_fu_638_p2() {
    or_cond2_fu_638_p2 = (or_cond_fu_630_p2.read() | or_cond1_fu_634_p2.read());
}

void envelope::thread_or_cond_fu_630_p2() {
    or_cond_fu_630_p2 = (sel_tmp11_reg_863.read() | sel_tmp8_reg_857.read());
}

void envelope::thread_releaseTime_flag_1_fu_390_p2() {
    releaseTime_flag_1_fu_390_p2 = (releaseTime_flag_reg_131.read() | sel_tmp1_fu_385_p2.read());
}

void envelope::thread_releaseTime_loc_1_fu_417_p3() {
    releaseTime_loc_1_fu_417_p3 = (!tmp_6_reg_776.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_776.read()[0].to_bool())? sel_tmp9_fu_409_p3.read(): releaseTime_loc_reg_143.read());
}

void envelope::thread_releaseTime_new_1_fu_403_p3() {
    releaseTime_new_1_fu_403_p3 = (!tmp_6_reg_776.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_776.read()[0].to_bool())? sel_tmp5_fu_396_p3.read(): releaseDuration_read_reg_683.read());
}

void envelope::thread_resultAmplitude_5_fu_650_p3() {
    resultAmplitude_5_fu_650_p3 = (!tmp_9_reg_822.read()[0].is_01())? sc_lv<32>(): ((tmp_9_reg_822.read()[0].to_bool())? grp_fu_181_p2.read(): ap_const_lv32_0);
}

void envelope::thread_resultAmplitude_6_fu_657_p3() {
    resultAmplitude_6_fu_657_p3 = (!sel_tmp3_reg_846.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_reg_846.read()[0].to_bool())? grp_fu_181_p2.read(): resultAmplitude_5_fu_650_p3.read());
}

void envelope::thread_resultAmplitude_7_fu_664_p3() {
    resultAmplitude_7_fu_664_p3 = (!sel_tmp8_reg_857.read()[0].is_01())? sc_lv<32>(): ((sel_tmp8_reg_857.read()[0].to_bool())? grp_fu_181_p2.read(): resultAmplitude_6_fu_657_p3.read());
}

void envelope::thread_resultAmplitude_fu_671_p3() {
    resultAmplitude_fu_671_p3 = (!sel_tmp11_reg_863.read()[0].is_01())? sc_lv<32>(): ((sel_tmp11_reg_863.read()[0].to_bool())? reg_210.read(): resultAmplitude_7_reg_898.read());
}

void envelope::thread_sel_tmp10_fu_588_p2() {
    sel_tmp10_fu_588_p2 = (sel_tmp37_demorgan_fu_546_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_sel_tmp11_fu_594_p2() {
    sel_tmp11_fu_594_p2 = (tmp_19_fu_506_p2.read() & sel_tmp10_fu_588_p2.read());
}

void envelope::thread_sel_tmp1_fu_385_p2() {
    sel_tmp1_fu_385_p2 = (tmp_6_reg_776.read() & tmp_8_fu_369_p2.read());
}

void envelope::thread_sel_tmp2_fu_443_p3() {
    sel_tmp2_fu_443_p3 = (!sel_tmp1_fu_385_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_385_p2.read()[0].to_bool())? tmp_s_fu_373_p2.read(): sustainTime_loc_reg_153.read());
}

void envelope::thread_sel_tmp30_demorgan_fu_530_p2() {
    sel_tmp30_demorgan_fu_530_p2 = (tmp_9_reg_822.read() | tmp_12_reg_830.read());
}

void envelope::thread_sel_tmp37_demorgan_fu_546_p2() {
    sel_tmp37_demorgan_fu_546_p2 = (sel_tmp30_demorgan_fu_530_p2.read() | tmp_17_fu_502_p2.read());
}

void envelope::thread_sel_tmp3_fu_519_p2() {
    sel_tmp3_fu_519_p2 = (tmp_12_reg_830.read() & not_tmp_s_fu_514_p2.read());
}

void envelope::thread_sel_tmp4_fu_524_p2() {
    sel_tmp4_fu_524_p2 = (sel_tmp3_fu_519_p2.read() ^ not_tmp_s_fu_514_p2.read());
}

void envelope::thread_sel_tmp5_fu_396_p3() {
    sel_tmp5_fu_396_p3 = (!sel_tmp1_fu_385_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_385_p2.read()[0].to_bool())? tmp_1_fu_379_p2.read(): releaseDuration_read_reg_683.read());
}

void envelope::thread_sel_tmp6_fu_570_p2() {
    sel_tmp6_fu_570_p2 = (tmp1_fu_564_p2.read() & sel_tmp4_fu_524_p2.read());
}

void envelope::thread_sel_tmp7_fu_576_p2() {
    sel_tmp7_fu_576_p2 = (sel_tmp30_demorgan_fu_530_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_sel_tmp8_fu_582_p2() {
    sel_tmp8_fu_582_p2 = (tmp_17_fu_502_p2.read() & sel_tmp7_fu_576_p2.read());
}

void envelope::thread_sel_tmp9_fu_409_p3() {
    sel_tmp9_fu_409_p3 = (!sel_tmp1_fu_385_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_385_p2.read()[0].to_bool())? tmp_1_fu_379_p2.read(): releaseTime_loc_reg_143.read());
}

void envelope::thread_sel_tmp_fu_430_p3() {
    sel_tmp_fu_430_p3 = (!sel_tmp1_fu_385_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp1_fu_385_p2.read()[0].to_bool())? tmp_s_fu_373_p2.read(): sustainDuration_read_reg_691.read());
}

void envelope::thread_sustainTime_flag_1_fu_424_p2() {
    sustainTime_flag_1_fu_424_p2 = (sustainTime_flag_reg_163.read() | sel_tmp1_fu_385_p2.read());
}

void envelope::thread_sustainTime_loc_1_fu_451_p3() {
    sustainTime_loc_1_fu_451_p3 = (!tmp_6_reg_776.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_776.read()[0].to_bool())? sel_tmp2_fu_443_p3.read(): sustainTime_loc_reg_153.read());
}

void envelope::thread_sustainTime_loc_phi_fu_156_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_4_load_fu_302_p1.read())) {
            sustainTime_loc_phi_fu_156_p4 = sustainTime.read();
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, guard_variable_for_e_4_load_fu_302_p1.read())) {
            sustainTime_loc_phi_fu_156_p4 = sustainDuration_read_reg_691.read();
        } else {
            sustainTime_loc_phi_fu_156_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        }
    } else {
        sustainTime_loc_phi_fu_156_p4 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_sustainTime_loc_time_fu_332_p3() {
    sustainTime_loc_time_fu_332_p3 = (!tmp_5_fu_326_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_5_fu_326_p2.read()[0].to_bool())? sustainTime_loc_phi_fu_156_p4.read(): time_r.read());
}

void envelope::thread_sustainTime_new_1_fu_437_p3() {
    sustainTime_new_1_fu_437_p3 = (!tmp_6_reg_776.read()[0].is_01())? sc_lv<32>(): ((tmp_6_reg_776.read()[0].to_bool())? sel_tmp_fu_430_p3.read(): sustainDuration_read_reg_691.read());
}

void envelope::thread_time_loc_1_fu_346_p3() {
    time_loc_1_fu_346_p3 = (!tmp_4_fu_317_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_4_fu_317_p2.read()[0].to_bool())? sustainTime_loc_time_fu_332_p3.read(): time_r.read());
}

void envelope::thread_time_loc_2_fu_481_p3() {
    time_loc_2_fu_481_p3 = (!tmp_3_fu_464_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_3_fu_464_p2.read()[0].to_bool())? time_loc_1_reg_770.read(): ap_const_lv32_0);
}

void envelope::thread_tmp1_fu_564_p2() {
    tmp1_fu_564_p2 = (not_sel_tmp_fu_540_p2.read() & not_sel_tmp1_fu_558_p2.read());
}

void envelope::thread_tmp_11_i_fu_271_p2() {
    tmp_11_i_fu_271_p2 = (!releaseDuration_read_reg_683.read().is_01() || !sustainDuration_read_reg_691.read().is_01())? sc_lv<32>(): (sc_biguint<32>(releaseDuration_read_reg_683.read()) - sc_biguint<32>(sustainDuration_read_reg_691.read()));
}

void envelope::thread_tmp_12_fu_493_p2() {
    tmp_12_fu_493_p2 = (!time_loc_2_fu_481_p3.read().is_01() || !decayDuration_read_reg_706.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_loc_2_fu_481_p3.read()) < sc_bigint<32>(decayDuration_read_reg_706.read()));
}

void envelope::thread_tmp_13_fu_498_p2() {
    tmp_13_fu_498_p2 = (!time_loc_2_reg_812.read().is_01() || !attackDuration_read_reg_712.read().is_01())? sc_lv<32>(): (sc_biguint<32>(time_loc_2_reg_812.read()) - sc_biguint<32>(attackDuration_read_reg_712.read()));
}

void envelope::thread_tmp_17_fu_502_p2() {
    tmp_17_fu_502_p2 = (!time_loc_2_reg_812.read().is_01() || !sustainTime_loc_1_reg_806.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_loc_2_reg_812.read()) < sc_bigint<32>(sustainTime_loc_1_reg_806.read()));
}

void envelope::thread_tmp_19_fu_506_p2() {
    tmp_19_fu_506_p2 = (!time_loc_2_reg_812.read().is_01() || !releaseTime_loc_1_reg_798.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_loc_2_reg_812.read()) < sc_bigint<32>(releaseTime_loc_1_reg_798.read()));
}

void envelope::thread_tmp_1_fu_379_p2() {
    tmp_1_fu_379_p2 = (!releaseTime_loc_reg_143.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(releaseTime_loc_reg_143.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_tmp_20_fu_510_p2() {
    tmp_20_fu_510_p2 = (!time_loc_2_reg_812.read().is_01() || !sustainTime_loc_1_reg_806.read().is_01())? sc_lv<32>(): (sc_biguint<32>(time_loc_2_reg_812.read()) - sc_biguint<32>(sustainTime_loc_1_reg_806.read()));
}

void envelope::thread_tmp_21_not_fu_534_p2() {
    tmp_21_not_fu_534_p2 = (tmp_17_fu_502_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_tmp_23_not_fu_552_p2() {
    tmp_23_not_fu_552_p2 = (tmp_19_fu_506_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_tmp_24_fu_604_p2() {
    tmp_24_fu_604_p2 = (!time_loc_2_reg_812.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(time_loc_2_reg_812.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_tmp_2_fu_458_p2() {
    tmp_2_fu_458_p2 = (wait_r.read() ^ ap_const_lv1_1);
}

void envelope::thread_tmp_3_fu_464_p2() {
    tmp_3_fu_464_p2 = (tmp_2_fu_458_p2.read() | not_tmp_4_reg_764.read());
}

void envelope::thread_tmp_4_fu_317_p2() {
    tmp_4_fu_317_p2 = (!press_read_reg_720.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(press_read_reg_720.read() == ap_const_lv32_0);
}

void envelope::thread_tmp_4_i_fu_241_p2() {
    tmp_4_i_fu_241_p2 = (!sustainAmplitude_rea_reg_699.read().is_01() || !ap_const_lv32_FFFFFFFE.is_01())? sc_lv<32>(): (sc_biguint<32>(sustainAmplitude_rea_reg_699.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFE));
}

void envelope::thread_tmp_5_fu_326_p2() {
    tmp_5_fu_326_p2 = (!time_r.read().is_01() || !sustainTime_loc_phi_fu_156_p4.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_r.read()) < sc_bigint<32>(sustainTime_loc_phi_fu_156_p4.read()));
}

void envelope::thread_tmp_6_fu_354_p2() {
    tmp_6_fu_354_p2 = (!press_read_reg_720.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(press_read_reg_720.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void envelope::thread_tmp_6_i_fu_246_p2() {
    tmp_6_i_fu_246_p2 = (!decayDuration_read_reg_706.read().is_01() || !attackDuration_read_reg_712.read().is_01())? sc_lv<32>(): (sc_biguint<32>(decayDuration_read_reg_706.read()) - sc_biguint<32>(attackDuration_read_reg_712.read()));
}

void envelope::thread_tmp_7_fu_359_p2() {
    tmp_7_fu_359_p2 = (!sustainTime_loc_phi_fu_156_p4.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(sustainTime_loc_phi_fu_156_p4.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void envelope::thread_tmp_8_fu_369_p2() {
    tmp_8_fu_369_p2 = (!time_loc_1_reg_770.read().is_01() || !tmp_7_reg_785.read().is_01())? sc_lv<1>(): sc_lv<1>(time_loc_1_reg_770.read() == tmp_7_reg_785.read());
}

void envelope::thread_tmp_9_fu_488_p2() {
    tmp_9_fu_488_p2 = (!time_loc_2_fu_481_p3.read().is_01() || !attackDuration_read_reg_712.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_loc_2_fu_481_p3.read()) < sc_bigint<32>(attackDuration_read_reg_712.read()));
}

void envelope::thread_tmp_i_fu_266_p2() {
    tmp_i_fu_266_p2 = (!ap_const_lv32_0.is_01() || !sustainAmplitude_rea_reg_699.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(sustainAmplitude_rea_reg_699.read()));
}

void envelope::thread_tmp_s_fu_373_p2() {
    tmp_s_fu_373_p2 = (!sustainTime_loc_reg_153.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(sustainTime_loc_reg_153.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_wait_flag_1_fu_600_p2() {
    wait_flag_1_fu_600_p2 = (sel_tmp6_reg_852.read() | not_tmp_4_reg_764.read());
}

void envelope::thread_wave_in_V_0_ack_in() {
    wave_in_V_0_ack_in = wave_in_V_0_state.read()[1];
}

void envelope::thread_wave_in_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
         esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1))) {
        wave_in_V_0_ack_out = ap_const_logic_1;
    } else {
        wave_in_V_0_ack_out = ap_const_logic_0;
    }
}

void envelope::thread_wave_in_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_sel.read())) {
        wave_in_V_0_data_out = wave_in_V_0_payload_B.read();
    } else {
        wave_in_V_0_data_out = wave_in_V_0_payload_A.read();
    }
}

void envelope::thread_wave_in_V_0_load_A() {
    wave_in_V_0_load_A = (wave_in_V_0_state_cmp_full.read() & ~wave_in_V_0_sel_wr.read());
}

void envelope::thread_wave_in_V_0_load_B() {
    wave_in_V_0_load_B = (wave_in_V_0_sel_wr.read() & wave_in_V_0_state_cmp_full.read());
}

void envelope::thread_wave_in_V_0_sel() {
    wave_in_V_0_sel = wave_in_V_0_sel_rd.read();
}

void envelope::thread_wave_in_V_0_state_cmp_full() {
    wave_in_V_0_state_cmp_full =  (sc_logic) ((!wave_in_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(wave_in_V_0_state.read() != ap_const_lv2_1))[0];
}

void envelope::thread_wave_in_V_0_vld_in() {
    wave_in_V_0_vld_in = wave_in_V_TVALID.read();
}

void envelope::thread_wave_in_V_0_vld_out() {
    wave_in_V_0_vld_out = wave_in_V_0_state.read()[0];
}

void envelope::thread_wave_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read())) {
        wave_in_V_TDATA_blk_n = wave_in_V_0_state.read()[0];
    } else {
        wave_in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void envelope::thread_wave_in_V_TREADY() {
    wave_in_V_TREADY = wave_in_V_0_state.read()[1];
}

void envelope::thread_wave_out_V_1_ack_in() {
    wave_out_V_1_ack_in = wave_out_V_1_state.read()[1];
}

void envelope::thread_wave_out_V_1_ack_out() {
    wave_out_V_1_ack_out = wave_out_V_TREADY.read();
}

void envelope::thread_wave_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_sel.read())) {
        wave_out_V_1_data_out = wave_out_V_1_payload_B.read();
    } else {
        wave_out_V_1_data_out = wave_out_V_1_payload_A.read();
    }
}

void envelope::thread_wave_out_V_1_load_A() {
    wave_out_V_1_load_A = (wave_out_V_1_state_cmp_full.read() & ~wave_out_V_1_sel_wr.read());
}

void envelope::thread_wave_out_V_1_load_B() {
    wave_out_V_1_load_B = (wave_out_V_1_sel_wr.read() & wave_out_V_1_state_cmp_full.read());
}

void envelope::thread_wave_out_V_1_sel() {
    wave_out_V_1_sel = wave_out_V_1_sel_rd.read();
}

void envelope::thread_wave_out_V_1_state_cmp_full() {
    wave_out_V_1_state_cmp_full =  (sc_logic) ((!wave_out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(wave_out_V_1_state.read() != ap_const_lv2_1))[0];
}

void envelope::thread_wave_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read()) && 
         esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1))) {
        wave_out_V_1_vld_in = ap_const_logic_1;
    } else {
        wave_out_V_1_vld_in = ap_const_logic_0;
    }
}

void envelope::thread_wave_out_V_1_vld_out() {
    wave_out_V_1_vld_out = wave_out_V_1_state.read()[0];
}

void envelope::thread_wave_out_V_TDATA() {
    wave_out_V_TDATA = wave_out_V_1_data_out.read();
}

void envelope::thread_wave_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()))) {
        wave_out_V_TDATA_blk_n = wave_out_V_1_state.read()[1];
    } else {
        wave_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void envelope::thread_wave_out_V_TVALID() {
    wave_out_V_TVALID = wave_out_V_1_state.read()[0];
}

void envelope::thread_ap_NS_fsm() {
    if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_load_fu_221_p1.read()))) {
            ap_NS_fsm = ap_ST_fsm_state22;
        } else {
            ap_NS_fsm = ap_ST_fsm_state2;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_1_load_fu_237_p1.read()))) {
            ap_NS_fsm = ap_ST_fsm_state44;
        } else {
            ap_NS_fsm = ap_ST_fsm_state23;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        ap_NS_fsm = ap_ST_fsm_state24;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state44.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, guard_variable_for_e_2_load_fu_262_p1.read()))) {
            ap_NS_fsm = ap_ST_fsm_state66;
        } else {
            ap_NS_fsm = ap_ST_fsm_state45;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        ap_NS_fsm = ap_ST_fsm_state47;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state68;
        } else {
            ap_NS_fsm = ap_ST_fsm_state67;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        ap_NS_fsm = ap_ST_fsm_state69;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state69))
    {
        ap_NS_fsm = ap_ST_fsm_state70;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state70))
    {
        ap_NS_fsm = ap_ST_fsm_state71;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state71))
    {
        ap_NS_fsm = ap_ST_fsm_state72;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state72))
    {
        ap_NS_fsm = ap_ST_fsm_state73;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state73))
    {
        ap_NS_fsm = ap_ST_fsm_state74;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state74))
    {
        ap_NS_fsm = ap_ST_fsm_state75;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state75))
    {
        ap_NS_fsm = ap_ST_fsm_state76;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state76))
    {
        ap_NS_fsm = ap_ST_fsm_state77;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state77))
    {
        ap_NS_fsm = ap_ST_fsm_state78;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state78))
    {
        ap_NS_fsm = ap_ST_fsm_state79;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state79))
    {
        ap_NS_fsm = ap_ST_fsm_state80;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state80))
    {
        ap_NS_fsm = ap_ST_fsm_state81;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state81))
    {
        ap_NS_fsm = ap_ST_fsm_state82;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state82))
    {
        ap_NS_fsm = ap_ST_fsm_state83;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state83))
    {
        ap_NS_fsm = ap_ST_fsm_state84;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state84))
    {
        ap_NS_fsm = ap_ST_fsm_state85;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state85))
    {
        ap_NS_fsm = ap_ST_fsm_state86;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state86))
    {
        ap_NS_fsm = ap_ST_fsm_state87;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state87))
    {
        ap_NS_fsm = ap_ST_fsm_state88;
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state88))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state88.read()) && esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state89;
        } else {
            ap_NS_fsm = ap_ST_fsm_state88;
        }
    }
    else if (esl_seteq<1,89,89>(ap_CS_fsm.read(), ap_ST_fsm_state89))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state89.read()) && esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state89;
        }
    }
    else
    {
        ap_NS_fsm =  (sc_lv<89>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void envelope::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wave_in_V_TDATA\" :  \"" << wave_in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wave_in_V_TVALID\" :  \"" << wave_in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"wave_in_V_TREADY\" :  \"" << wave_in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wave_out_V_TDATA\" :  \"" << wave_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wave_out_V_TVALID\" :  \"" << wave_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wave_out_V_TREADY\" :  \"" << wave_out_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

