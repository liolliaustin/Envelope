// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "envelope.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic envelope::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic envelope::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<68> envelope::ap_ST_fsm_state1 = "1";
const sc_lv<68> envelope::ap_ST_fsm_state2 = "10";
const sc_lv<68> envelope::ap_ST_fsm_state3 = "100";
const sc_lv<68> envelope::ap_ST_fsm_state4 = "1000";
const sc_lv<68> envelope::ap_ST_fsm_state5 = "10000";
const sc_lv<68> envelope::ap_ST_fsm_state6 = "100000";
const sc_lv<68> envelope::ap_ST_fsm_state7 = "1000000";
const sc_lv<68> envelope::ap_ST_fsm_state8 = "10000000";
const sc_lv<68> envelope::ap_ST_fsm_state9 = "100000000";
const sc_lv<68> envelope::ap_ST_fsm_state10 = "1000000000";
const sc_lv<68> envelope::ap_ST_fsm_state11 = "10000000000";
const sc_lv<68> envelope::ap_ST_fsm_state12 = "100000000000";
const sc_lv<68> envelope::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state55 = "1000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state56 = "10000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state57 = "100000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state58 = "1000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state59 = "10000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state60 = "100000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state61 = "1000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state62 = "10000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state63 = "100000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state64 = "1000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state65 = "10000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state66 = "100000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state67 = "1000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<68> envelope::ap_ST_fsm_state68 = "10000000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> envelope::ap_const_lv1_0 = "0";
const sc_lv<1> envelope::ap_const_lv1_1 = "1";
const sc_lv<2> envelope::ap_const_lv2_0 = "00";
const sc_lv<2> envelope::ap_const_lv2_2 = "10";
const sc_lv<2> envelope::ap_const_lv2_3 = "11";
const sc_lv<2> envelope::ap_const_lv2_1 = "1";
const sc_lv<32> envelope::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> envelope::ap_const_lv32_2D = "101101";
const sc_lv<32> envelope::ap_const_lv32_42 = "1000010";
const sc_lv<32> envelope::ap_const_lv32_43 = "1000011";
const int envelope::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> envelope::ap_const_lv32_6 = "110";
const sc_lv<32> envelope::ap_const_lv32_1C = "11100";
const sc_lv<32> envelope::ap_const_lv32_34 = "110100";
const sc_lv<32> envelope::ap_const_lv32_3D = "111101";
const sc_lv<32> envelope::ap_const_lv32_38 = "111000";
const sc_lv<32> envelope::ap_const_lv32_41 = "1000001";
const sc_lv<32> envelope::ap_const_lv32_15 = "10101";
const sc_lv<32> envelope::ap_const_lv32_16 = "10110";
const sc_lv<32> envelope::ap_const_lv32_1D = "11101";
const sc_lv<32> envelope::ap_const_lv32_2C = "101100";
const sc_lv<32> envelope::ap_const_lv32_2E = "101110";
const sc_lv<32> envelope::ap_const_lv32_2F = "101111";
const sc_lv<32> envelope::ap_const_lv32_35 = "110101";
const sc_lv<32> envelope::ap_const_lv32_BF800000 = "10111111100000000000000000000000";
const sc_lv<32> envelope::ap_const_lv32_3F800000 = "111111100000000000000000000000";
const sc_lv<32> envelope::ap_const_lv32_2 = "10";
const sc_lv<32> envelope::ap_const_lv32_39 = "111001";
const sc_lv<32> envelope::ap_const_lv32_3E = "111110";
const sc_lv<32> envelope::ap_const_lv32_7 = "111";
const sc_lv<32> envelope::ap_const_lv32_1 = "1";
const sc_lv<32> envelope::ap_const_lv32_17 = "10111";
const sc_lv<32> envelope::ap_const_lv32_1E = "11110";
const sc_lv<8> envelope::ap_const_lv8_FF = "11111111";
const sc_lv<23> envelope::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<32> envelope::ap_const_lv32_80000000 = "10000000000000000000000000000000";
const sc_lv<5> envelope::ap_const_lv5_2 = "10";
const bool envelope::ap_const_boolean_1 = true;

envelope::envelope(sc_module_name name) : sc_module(name), mVcdFile(0) {
    envelope_CTRL_BUS_s_axi_U = new envelope_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("envelope_CTRL_BUS_s_axi_U");
    envelope_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    envelope_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    envelope_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    envelope_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    envelope_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    envelope_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    envelope_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    envelope_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    envelope_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    envelope_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    envelope_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    envelope_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    envelope_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    envelope_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    envelope_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    envelope_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    envelope_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    envelope_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    envelope_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    envelope_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    envelope_CTRL_BUS_s_axi_U->press(press);
    envelope_CTRL_BUS_s_axi_U->attackDuration(attackDuration);
    envelope_CTRL_BUS_s_axi_U->decayDuration(decayDuration);
    envelope_CTRL_BUS_s_axi_U->sustainAmplitude(sustainAmplitude);
    envelope_CTRL_BUS_s_axi_U->releaseDuration(releaseDuration);
    envelope_fadd_32nbkb_U1 = new envelope_fadd_32nbkb<1,5,32,32,32>("envelope_fadd_32nbkb_U1");
    envelope_fadd_32nbkb_U1->clk(ap_clk);
    envelope_fadd_32nbkb_U1->reset(ap_rst_n_inv);
    envelope_fadd_32nbkb_U1->din0(grp_fu_154_p0);
    envelope_fadd_32nbkb_U1->din1(grp_fu_154_p1);
    envelope_fadd_32nbkb_U1->ce(ap_var_for_const0);
    envelope_fadd_32nbkb_U1->dout(grp_fu_154_p2);
    envelope_fmul_32ncud_U2 = new envelope_fmul_32ncud<1,4,32,32,32>("envelope_fmul_32ncud_U2");
    envelope_fmul_32ncud_U2->clk(ap_clk);
    envelope_fmul_32ncud_U2->reset(ap_rst_n_inv);
    envelope_fmul_32ncud_U2->din0(grp_fu_160_p0);
    envelope_fmul_32ncud_U2->din1(grp_fu_160_p1);
    envelope_fmul_32ncud_U2->ce(ap_var_for_const0);
    envelope_fmul_32ncud_U2->dout(grp_fu_160_p2);
    envelope_fdiv_32ndEe_U3 = new envelope_fdiv_32ndEe<1,16,32,32,32>("envelope_fdiv_32ndEe_U3");
    envelope_fdiv_32ndEe_U3->clk(ap_clk);
    envelope_fdiv_32ndEe_U3->reset(ap_rst_n_inv);
    envelope_fdiv_32ndEe_U3->din0(grp_fu_164_p0);
    envelope_fdiv_32ndEe_U3->din1(reg_189);
    envelope_fdiv_32ndEe_U3->ce(ap_var_for_const0);
    envelope_fdiv_32ndEe_U3->dout(grp_fu_164_p2);
    envelope_fdiv_32ndEe_U4 = new envelope_fdiv_32ndEe<1,16,32,32,32>("envelope_fdiv_32ndEe_U4");
    envelope_fdiv_32ndEe_U4->clk(ap_clk);
    envelope_fdiv_32ndEe_U4->reset(ap_rst_n_inv);
    envelope_fdiv_32ndEe_U4->din0(reg_195);
    envelope_fdiv_32ndEe_U4->din1(tmp_4_reg_654);
    envelope_fdiv_32ndEe_U4->ce(ap_var_for_const0);
    envelope_fdiv_32ndEe_U4->dout(grp_fu_169_p2);
    envelope_sitofp_3eOg_U5 = new envelope_sitofp_3eOg<1,6,32,32>("envelope_sitofp_3eOg_U5");
    envelope_sitofp_3eOg_U5->clk(ap_clk);
    envelope_sitofp_3eOg_U5->reset(ap_rst_n_inv);
    envelope_sitofp_3eOg_U5->din0(grp_fu_173_p0);
    envelope_sitofp_3eOg_U5->ce(ap_var_for_const0);
    envelope_sitofp_3eOg_U5->dout(grp_fu_173_p1);
    envelope_sitofp_3eOg_U6 = new envelope_sitofp_3eOg<1,6,32,32>("envelope_sitofp_3eOg_U6");
    envelope_sitofp_3eOg_U6->clk(ap_clk);
    envelope_sitofp_3eOg_U6->reset(ap_rst_n_inv);
    envelope_sitofp_3eOg_U6->din0(tmp_3_reg_649);
    envelope_sitofp_3eOg_U6->ce(ap_var_for_const0);
    envelope_sitofp_3eOg_U6->dout(grp_fu_176_p1);
    envelope_fcmp_32nfYi_U7 = new envelope_fcmp_32nfYi<1,1,32,32,1>("envelope_fcmp_32nfYi_U7");
    envelope_fcmp_32nfYi_U7->din0(sustainAmplitude_rea_reg_621);
    envelope_fcmp_32nfYi_U7->din1(ap_var_for_const1);
    envelope_fcmp_32nfYi_U7->opcode(ap_var_for_const2);
    envelope_fcmp_32nfYi_U7->dout(tmp_32_fu_179_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state45);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state46);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state47);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state48);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state57);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state58);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state62);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state63);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state66);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state67);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state68);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_grp_fu_154_p0);
    sensitive << ( sel_tmp2_reg_778 );
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( sel_tmp5_reg_795 );
    sensitive << ( reg_201 );
    sensitive << ( sustainAmplitude_rea_reg_621 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_grp_fu_154_p1);
    sensitive << ( sel_tmp2_reg_778 );
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( sel_tmp5_reg_795 );
    sensitive << ( sustainAmplitude_ass_reg_674 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state58 );

    SC_METHOD(thread_grp_fu_160_p0);
    sensitive << ( releaseSlope );
    sensitive << ( tmp_16_reg_748 );
    sensitive << ( sel_tmp2_reg_778 );
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( sel_tmp5_reg_795 );
    sensitive << ( attackSlope_reg_664 );
    sensitive << ( decaySlope_reg_669 );
    sensitive << ( tmp_36_reg_725 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( ap_CS_fsm_state63 );

    SC_METHOD(thread_grp_fu_160_p1);
    sensitive << ( reg_189 );
    sensitive << ( tmp_16_reg_748 );
    sensitive << ( sel_tmp2_reg_778 );
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( sel_tmp5_reg_795 );
    sensitive << ( reg_195 );
    sensitive << ( reg_201 );
    sensitive << ( sustainAmplitude_ass_reg_674 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( ap_CS_fsm_state63 );

    SC_METHOD(thread_grp_fu_164_p0);
    sensitive << ( tmp_9_fu_302_p1 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_173_p0);
    sensitive << ( tmp_16_reg_748 );
    sensitive << ( sel_tmp2_reg_778 );
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( sel_tmp5_reg_795 );
    sensitive << ( attackDuration_read_reg_636 );
    sensitive << ( tmp_s_reg_703 );
    sensitive << ( time_load_s_reg_739 );
    sensitive << ( tmp_20_reg_768 );
    sensitive << ( tmp_26_reg_773 );
    sensitive << ( ap_CS_fsm_state48 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_METHOD(thread_grp_fu_184_p2);
    sensitive << ( decayDuration_read_reg_629 );

    SC_METHOD(thread_not_or_cond_fu_573_p2);
    sensitive << ( or_cond2_fu_567_p2 );

    SC_METHOD(thread_not_sel_tmp7_fu_481_p2);
    sensitive << ( sel_tmp6_demorgan_fu_471_p2 );
    sensitive << ( tmp_24_not_fu_475_p2 );

    SC_METHOD(thread_not_sel_tmp_fu_498_p2);
    sensitive << ( sel_tmp13_demorgan_fu_487_p2 );
    sensitive << ( tmp_25_not_fu_493_p2 );

    SC_METHOD(thread_not_tmp_7_fu_318_p2);
    sensitive << ( tmp_7_reg_681 );

    SC_METHOD(thread_not_tmp_s_fu_455_p2);
    sensitive << ( tmp_16_reg_748 );

    SC_METHOD(thread_notlhs_fu_230_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_5_fu_216_p4 );

    SC_METHOD(thread_notrhs_fu_236_p2);
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( tmp_fu_226_p1 );

    SC_METHOD(thread_or_cond1_fu_563_p2);
    sensitive << ( tmp_16_reg_748 );
    sensitive << ( sel_tmp2_reg_778 );

    SC_METHOD(thread_or_cond2_fu_567_p2);
    sensitive << ( or_cond_fu_559_p2 );
    sensitive << ( or_cond1_fu_563_p2 );

    SC_METHOD(thread_or_cond_4_fu_275_p2);
    sensitive << ( tmp_7_fu_270_p2 );
    sensitive << ( tmp_6_fu_264_p2 );

    SC_METHOD(thread_or_cond_fu_559_p2);
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( sel_tmp5_reg_795 );

    SC_METHOD(thread_releaseTime_flag_1_s_fu_379_p2);
    sensitive << ( releaseTime_flag_reg_123 );
    sensitive << ( tmp1_fu_374_p2 );

    SC_METHOD(thread_releaseTime_loc_1_fu_345_p3);
    sensitive << ( tmp_7_reg_681 );
    sensitive << ( releaseTime_loc_reg_136 );
    sensitive << ( tmp_13_fu_333_p2 );

    SC_METHOD(thread_releaseTime_loc_1_re_fu_392_p3);
    sensitive << ( releaseDuration_read_reg_612 );
    sensitive << ( tmp_14_fu_365_p2 );
    sensitive << ( releaseTime_loc_1_fu_345_p3 );

    SC_METHOD(thread_releaseTime_new_1_fu_339_p3);
    sensitive << ( releaseDuration_read_reg_612 );
    sensitive << ( tmp_7_reg_681 );
    sensitive << ( tmp_13_fu_333_p2 );

    SC_METHOD(thread_releaseTime_new_1_re_fu_385_p3);
    sensitive << ( releaseDuration_read_reg_612 );
    sensitive << ( tmp_14_fu_365_p2 );
    sensitive << ( releaseTime_new_1_fu_339_p3 );

    SC_METHOD(thread_resultAmplitude_5_fu_579_p3);
    sensitive << ( tmp_16_reg_748 );
    sensitive << ( grp_fu_160_p2 );

    SC_METHOD(thread_resultAmplitude_6_fu_586_p3);
    sensitive << ( sel_tmp2_reg_778 );
    sensitive << ( grp_fu_160_p2 );
    sensitive << ( resultAmplitude_5_fu_579_p3 );

    SC_METHOD(thread_resultAmplitude_7_fu_593_p3);
    sensitive << ( sel_tmp3_reg_789 );
    sensitive << ( grp_fu_160_p2 );
    sensitive << ( resultAmplitude_6_fu_586_p3 );

    SC_METHOD(thread_resultAmplitude_fu_600_p3);
    sensitive << ( sel_tmp5_reg_795 );
    sensitive << ( reg_201 );
    sensitive << ( resultAmplitude_7_reg_815 );

    SC_METHOD(thread_sel_tmp13_demorgan_fu_487_p2);
    sensitive << ( tmp_24_fu_447_p2 );
    sensitive << ( sel_tmp6_demorgan_fu_471_p2 );

    SC_METHOD(thread_sel_tmp1_fu_516_p2);
    sensitive << ( sel_tmp6_demorgan_fu_471_p2 );

    SC_METHOD(thread_sel_tmp2_fu_460_p2);
    sensitive << ( tmp_19_reg_756 );
    sensitive << ( not_tmp_s_fu_455_p2 );

    SC_METHOD(thread_sel_tmp3_fu_522_p2);
    sensitive << ( tmp_24_fu_447_p2 );
    sensitive << ( sel_tmp1_fu_516_p2 );

    SC_METHOD(thread_sel_tmp4_fu_528_p2);
    sensitive << ( sel_tmp13_demorgan_fu_487_p2 );

    SC_METHOD(thread_sel_tmp5_fu_534_p2);
    sensitive << ( tmp_25_reg_762 );
    sensitive << ( sel_tmp4_fu_528_p2 );

    SC_METHOD(thread_sel_tmp6_demorgan_fu_471_p2);
    sensitive << ( tmp_16_reg_748 );
    sensitive << ( tmp_19_reg_756 );

    SC_METHOD(thread_sel_tmp8_fu_510_p2);
    sensitive << ( tmp2_fu_504_p2 );
    sensitive << ( sel_tmp_fu_465_p2 );

    SC_METHOD(thread_sel_tmp_fu_465_p2);
    sensitive << ( sel_tmp2_fu_460_p2 );
    sensitive << ( not_tmp_s_fu_455_p2 );

    SC_METHOD(thread_sustainAmplitude_ass_fu_253_p3);
    sensitive << ( sustainAmplitude_rea_reg_621 );
    sensitive << ( tmp_33_fu_248_p2 );

    SC_METHOD(thread_sustainAmplitude_to_s_fu_213_p1);
    sensitive << ( sustainAmplitude_rea_reg_621 );

    SC_METHOD(thread_sustainTime_new_1_fu_352_p3);
    sensitive << ( tmp_7_reg_681 );
    sensitive << ( sustainTime_loc_reg_145 );
    sensitive << ( tmp_12_fu_327_p2 );

    SC_METHOD(thread_sustainTime_new_1_tm_fu_399_p3);
    sensitive << ( grp_fu_184_p2 );
    sensitive << ( tmp_14_fu_365_p2 );
    sensitive << ( sustainTime_new_1_fu_352_p3 );

    SC_METHOD(thread_time_load_s_fu_407_p3);
    sensitive << ( time_r );
    sensitive << ( tmp_14_fu_365_p2 );

    SC_METHOD(thread_tmp1_fu_374_p2);
    sensitive << ( wait_r );
    sensitive << ( not_tmp_7_reg_718 );

    SC_METHOD(thread_tmp2_fu_504_p2);
    sensitive << ( not_sel_tmp7_fu_481_p2 );
    sensitive << ( not_sel_tmp_fu_498_p2 );

    SC_METHOD(thread_tmp_12_fu_327_p2);
    sensitive << ( sustainTime_loc_reg_145 );

    SC_METHOD(thread_tmp_13_fu_333_p2);
    sensitive << ( releaseTime_loc_reg_136 );

    SC_METHOD(thread_tmp_14_fu_365_p2);
    sensitive << ( not_tmp_7_reg_718 );
    sensitive << ( tmp_34_fu_359_p2 );

    SC_METHOD(thread_tmp_16_fu_415_p2);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( attackDuration_read_reg_636 );
    sensitive << ( time_load_s_fu_407_p3 );

    SC_METHOD(thread_tmp_19_fu_432_p2);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( decayDuration_read_reg_629 );
    sensitive << ( time_load_s_fu_407_p3 );

    SC_METHOD(thread_tmp_20_fu_443_p2);
    sensitive << ( attackDuration_read_reg_636 );
    sensitive << ( time_load_s_reg_739 );

    SC_METHOD(thread_tmp_24_fu_447_p2);
    sensitive << ( sustainTime_new_1_tm_reg_733 );
    sensitive << ( time_load_s_reg_739 );
    sensitive << ( ap_CS_fsm_state47 );

    SC_METHOD(thread_tmp_24_not_fu_475_p2);
    sensitive << ( tmp_24_fu_447_p2 );

    SC_METHOD(thread_tmp_25_fu_437_p2);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( time_load_s_fu_407_p3 );
    sensitive << ( releaseTime_loc_1_re_fu_392_p3 );

    SC_METHOD(thread_tmp_25_not_fu_493_p2);
    sensitive << ( tmp_25_reg_762 );

    SC_METHOD(thread_tmp_26_fu_451_p2);
    sensitive << ( sustainTime_new_1_tm_reg_733 );
    sensitive << ( time_load_s_reg_739 );

    SC_METHOD(thread_tmp_30_fu_242_p2);
    sensitive << ( notrhs_fu_236_p2 );
    sensitive << ( notlhs_fu_230_p2 );

    SC_METHOD(thread_tmp_31_fu_543_p2);
    sensitive << ( time_load_s_reg_739 );

    SC_METHOD(thread_tmp_33_fu_248_p2);
    sensitive << ( tmp_32_reg_659 );
    sensitive << ( tmp_30_fu_242_p2 );

    SC_METHOD(thread_tmp_34_fu_359_p2);
    sensitive << ( wait_r );

    SC_METHOD(thread_tmp_3_fu_207_p2);
    sensitive << ( attackDuration );
    sensitive << ( decayDuration );

    SC_METHOD(thread_tmp_5_fu_216_p4);
    sensitive << ( sustainAmplitude_to_s_fu_213_p1 );

    SC_METHOD(thread_tmp_6_fu_264_p2);
    sensitive << ( lastpress );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_tmp_7_fu_270_p2);
    sensitive << ( press_read_reg_643 );
    sensitive << ( ap_CS_fsm_state23 );

    SC_METHOD(thread_tmp_9_fu_302_p1);
    sensitive << ( tmp_9_neg_fu_296_p2 );

    SC_METHOD(thread_tmp_9_neg_fu_296_p2);
    sensitive << ( tmp_9_to_int_fu_293_p1 );

    SC_METHOD(thread_tmp_9_to_int_fu_293_p1);
    sensitive << ( sustainAmplitude_ass_reg_674 );

    SC_METHOD(thread_tmp_fu_226_p1);
    sensitive << ( sustainAmplitude_to_s_fu_213_p1 );

    SC_METHOD(thread_tmp_s_fu_289_p2);
    sensitive << ( releaseDuration_read_reg_612 );
    sensitive << ( decayDuration_read_reg_629 );

    SC_METHOD(thread_wait_flag_1_fu_539_p2);
    sensitive << ( not_tmp_7_reg_718 );
    sensitive << ( sel_tmp8_reg_784 );

    SC_METHOD(thread_wave_in_V_0_ack_in);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_in_V_0_ack_out);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_wave_in_V_0_data_out);
    sensitive << ( wave_in_V_0_payload_A );
    sensitive << ( wave_in_V_0_payload_B );
    sensitive << ( wave_in_V_0_sel );

    SC_METHOD(thread_wave_in_V_0_load_A);
    sensitive << ( wave_in_V_0_sel_wr );
    sensitive << ( wave_in_V_0_state_cmp_full );

    SC_METHOD(thread_wave_in_V_0_load_B);
    sensitive << ( wave_in_V_0_sel_wr );
    sensitive << ( wave_in_V_0_state_cmp_full );

    SC_METHOD(thread_wave_in_V_0_sel);
    sensitive << ( wave_in_V_0_sel_rd );

    SC_METHOD(thread_wave_in_V_0_state_cmp_full);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_in_V_0_vld_in);
    sensitive << ( wave_in_V_TVALID );

    SC_METHOD(thread_wave_in_V_0_vld_out);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_in_V_TDATA_blk_n);
    sensitive << ( wave_in_V_0_state );
    sensitive << ( ap_CS_fsm_state46 );

    SC_METHOD(thread_wave_in_V_TREADY);
    sensitive << ( wave_in_V_0_state );

    SC_METHOD(thread_wave_out_V_1_ack_in);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_wave_out_V_1_ack_out);
    sensitive << ( wave_out_V_TREADY );

    SC_METHOD(thread_wave_out_V_1_data_out);
    sensitive << ( wave_out_V_1_payload_A );
    sensitive << ( wave_out_V_1_payload_B );
    sensitive << ( wave_out_V_1_sel );

    SC_METHOD(thread_wave_out_V_1_load_A);
    sensitive << ( wave_out_V_1_sel_wr );
    sensitive << ( wave_out_V_1_state_cmp_full );

    SC_METHOD(thread_wave_out_V_1_load_B);
    sensitive << ( wave_out_V_1_sel_wr );
    sensitive << ( wave_out_V_1_state_cmp_full );

    SC_METHOD(thread_wave_out_V_1_sel);
    sensitive << ( wave_out_V_1_sel_rd );

    SC_METHOD(thread_wave_out_V_1_state_cmp_full);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_wave_out_V_1_vld_in);
    sensitive << ( wave_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state67 );

    SC_METHOD(thread_wave_out_V_1_vld_out);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_wave_out_V_TDATA);
    sensitive << ( wave_out_V_1_data_out );

    SC_METHOD(thread_wave_out_V_TDATA_blk_n);
    sensitive << ( wave_out_V_1_state );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state68 );

    SC_METHOD(thread_wave_out_V_TVALID);
    sensitive << ( wave_out_V_1_state );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( wave_in_V_0_vld_out );
    sensitive << ( wave_out_V_1_ack_in );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state46 );
    sensitive << ( ap_CS_fsm_state67 );
    sensitive << ( ap_CS_fsm_state68 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( or_cond_4_fu_275_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    wave_in_V_0_sel_rd = SC_LOGIC_0;
    wave_in_V_0_sel_wr = SC_LOGIC_0;
    wave_in_V_0_state = "00";
    wave_out_V_1_sel_rd = SC_LOGIC_0;
    wave_out_V_1_sel_wr = SC_LOGIC_0;
    wave_out_V_1_state = "00";
    lastpress = "00000000000000000000000000000000";
    releaseTime = "00000000000000000000000000000000";
    sustainTime = "00000000000000000000000000000000";
    releaseSlope = "00000000000000000000000000000000";
    wait_r = "0";
    time_r = "00000000000000000000000000000000";
    ap_CS_fsm = "00000000000000000000000000000000000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "envelope_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, wave_in_V_TDATA, "(port)wave_in_V_TDATA");
    sc_trace(mVcdFile, wave_in_V_TVALID, "(port)wave_in_V_TVALID");
    sc_trace(mVcdFile, wave_in_V_TREADY, "(port)wave_in_V_TREADY");
    sc_trace(mVcdFile, wave_out_V_TDATA, "(port)wave_out_V_TDATA");
    sc_trace(mVcdFile, wave_out_V_TVALID, "(port)wave_out_V_TVALID");
    sc_trace(mVcdFile, wave_out_V_TREADY, "(port)wave_out_V_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, wave_in_V_0_data_out, "wave_in_V_0_data_out");
    sc_trace(mVcdFile, wave_in_V_0_vld_in, "wave_in_V_0_vld_in");
    sc_trace(mVcdFile, wave_in_V_0_vld_out, "wave_in_V_0_vld_out");
    sc_trace(mVcdFile, wave_in_V_0_ack_in, "wave_in_V_0_ack_in");
    sc_trace(mVcdFile, wave_in_V_0_ack_out, "wave_in_V_0_ack_out");
    sc_trace(mVcdFile, wave_in_V_0_payload_A, "wave_in_V_0_payload_A");
    sc_trace(mVcdFile, wave_in_V_0_payload_B, "wave_in_V_0_payload_B");
    sc_trace(mVcdFile, wave_in_V_0_sel_rd, "wave_in_V_0_sel_rd");
    sc_trace(mVcdFile, wave_in_V_0_sel_wr, "wave_in_V_0_sel_wr");
    sc_trace(mVcdFile, wave_in_V_0_sel, "wave_in_V_0_sel");
    sc_trace(mVcdFile, wave_in_V_0_load_A, "wave_in_V_0_load_A");
    sc_trace(mVcdFile, wave_in_V_0_load_B, "wave_in_V_0_load_B");
    sc_trace(mVcdFile, wave_in_V_0_state, "wave_in_V_0_state");
    sc_trace(mVcdFile, wave_in_V_0_state_cmp_full, "wave_in_V_0_state_cmp_full");
    sc_trace(mVcdFile, wave_out_V_1_data_out, "wave_out_V_1_data_out");
    sc_trace(mVcdFile, wave_out_V_1_vld_in, "wave_out_V_1_vld_in");
    sc_trace(mVcdFile, wave_out_V_1_vld_out, "wave_out_V_1_vld_out");
    sc_trace(mVcdFile, wave_out_V_1_ack_in, "wave_out_V_1_ack_in");
    sc_trace(mVcdFile, wave_out_V_1_ack_out, "wave_out_V_1_ack_out");
    sc_trace(mVcdFile, wave_out_V_1_payload_A, "wave_out_V_1_payload_A");
    sc_trace(mVcdFile, wave_out_V_1_payload_B, "wave_out_V_1_payload_B");
    sc_trace(mVcdFile, wave_out_V_1_sel_rd, "wave_out_V_1_sel_rd");
    sc_trace(mVcdFile, wave_out_V_1_sel_wr, "wave_out_V_1_sel_wr");
    sc_trace(mVcdFile, wave_out_V_1_sel, "wave_out_V_1_sel");
    sc_trace(mVcdFile, wave_out_V_1_load_A, "wave_out_V_1_load_A");
    sc_trace(mVcdFile, wave_out_V_1_load_B, "wave_out_V_1_load_B");
    sc_trace(mVcdFile, wave_out_V_1_state, "wave_out_V_1_state");
    sc_trace(mVcdFile, wave_out_V_1_state_cmp_full, "wave_out_V_1_state_cmp_full");
    sc_trace(mVcdFile, press, "press");
    sc_trace(mVcdFile, attackDuration, "attackDuration");
    sc_trace(mVcdFile, decayDuration, "decayDuration");
    sc_trace(mVcdFile, sustainAmplitude, "sustainAmplitude");
    sc_trace(mVcdFile, releaseDuration, "releaseDuration");
    sc_trace(mVcdFile, lastpress, "lastpress");
    sc_trace(mVcdFile, releaseTime, "releaseTime");
    sc_trace(mVcdFile, sustainTime, "sustainTime");
    sc_trace(mVcdFile, releaseSlope, "releaseSlope");
    sc_trace(mVcdFile, wait_r, "wait_r");
    sc_trace(mVcdFile, time_r, "time_r");
    sc_trace(mVcdFile, wave_in_V_TDATA_blk_n, "wave_in_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state46, "ap_CS_fsm_state46");
    sc_trace(mVcdFile, wave_out_V_TDATA_blk_n, "wave_out_V_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state67, "ap_CS_fsm_state67");
    sc_trace(mVcdFile, ap_CS_fsm_state68, "ap_CS_fsm_state68");
    sc_trace(mVcdFile, grp_fu_173_p1, "grp_fu_173_p1");
    sc_trace(mVcdFile, reg_189, "reg_189");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, tmp_16_reg_748, "tmp_16_reg_748");
    sc_trace(mVcdFile, sel_tmp2_reg_778, "sel_tmp2_reg_778");
    sc_trace(mVcdFile, sel_tmp3_reg_789, "sel_tmp3_reg_789");
    sc_trace(mVcdFile, sel_tmp5_reg_795, "sel_tmp5_reg_795");
    sc_trace(mVcdFile, grp_fu_154_p2, "grp_fu_154_p2");
    sc_trace(mVcdFile, reg_195, "reg_195");
    sc_trace(mVcdFile, ap_CS_fsm_state62, "ap_CS_fsm_state62");
    sc_trace(mVcdFile, grp_fu_160_p2, "grp_fu_160_p2");
    sc_trace(mVcdFile, reg_201, "reg_201");
    sc_trace(mVcdFile, ap_CS_fsm_state57, "ap_CS_fsm_state57");
    sc_trace(mVcdFile, ap_CS_fsm_state66, "ap_CS_fsm_state66");
    sc_trace(mVcdFile, releaseDuration_read_reg_612, "releaseDuration_read_reg_612");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sustainAmplitude_rea_reg_621, "sustainAmplitude_rea_reg_621");
    sc_trace(mVcdFile, decayDuration_read_reg_629, "decayDuration_read_reg_629");
    sc_trace(mVcdFile, attackDuration_read_reg_636, "attackDuration_read_reg_636");
    sc_trace(mVcdFile, press_read_reg_643, "press_read_reg_643");
    sc_trace(mVcdFile, tmp_3_fu_207_p2, "tmp_3_fu_207_p2");
    sc_trace(mVcdFile, tmp_3_reg_649, "tmp_3_reg_649");
    sc_trace(mVcdFile, grp_fu_176_p1, "grp_fu_176_p1");
    sc_trace(mVcdFile, tmp_4_reg_654, "tmp_4_reg_654");
    sc_trace(mVcdFile, tmp_32_fu_179_p2, "tmp_32_fu_179_p2");
    sc_trace(mVcdFile, tmp_32_reg_659, "tmp_32_reg_659");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, grp_fu_164_p2, "grp_fu_164_p2");
    sc_trace(mVcdFile, attackSlope_reg_664, "attackSlope_reg_664");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, grp_fu_169_p2, "grp_fu_169_p2");
    sc_trace(mVcdFile, decaySlope_reg_669, "decaySlope_reg_669");
    sc_trace(mVcdFile, sustainAmplitude_ass_fu_253_p3, "sustainAmplitude_ass_fu_253_p3");
    sc_trace(mVcdFile, sustainAmplitude_ass_reg_674, "sustainAmplitude_ass_reg_674");
    sc_trace(mVcdFile, tmp_7_fu_270_p2, "tmp_7_fu_270_p2");
    sc_trace(mVcdFile, tmp_7_reg_681, "tmp_7_reg_681");
    sc_trace(mVcdFile, or_cond_4_fu_275_p2, "or_cond_4_fu_275_p2");
    sc_trace(mVcdFile, or_cond_4_reg_689, "or_cond_4_reg_689");
    sc_trace(mVcdFile, tmp_s_fu_289_p2, "tmp_s_fu_289_p2");
    sc_trace(mVcdFile, tmp_s_reg_703, "tmp_s_reg_703");
    sc_trace(mVcdFile, tmp_9_fu_302_p1, "tmp_9_fu_302_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, grp_fu_184_p2, "grp_fu_184_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state45, "ap_CS_fsm_state45");
    sc_trace(mVcdFile, not_tmp_7_fu_318_p2, "not_tmp_7_fu_318_p2");
    sc_trace(mVcdFile, not_tmp_7_reg_718, "not_tmp_7_reg_718");
    sc_trace(mVcdFile, tmp_36_reg_725, "tmp_36_reg_725");
    sc_trace(mVcdFile, sustainTime_new_1_tm_fu_399_p3, "sustainTime_new_1_tm_fu_399_p3");
    sc_trace(mVcdFile, sustainTime_new_1_tm_reg_733, "sustainTime_new_1_tm_reg_733");
    sc_trace(mVcdFile, time_load_s_fu_407_p3, "time_load_s_fu_407_p3");
    sc_trace(mVcdFile, time_load_s_reg_739, "time_load_s_reg_739");
    sc_trace(mVcdFile, tmp_16_fu_415_p2, "tmp_16_fu_415_p2");
    sc_trace(mVcdFile, tmp_19_fu_432_p2, "tmp_19_fu_432_p2");
    sc_trace(mVcdFile, tmp_19_reg_756, "tmp_19_reg_756");
    sc_trace(mVcdFile, tmp_25_fu_437_p2, "tmp_25_fu_437_p2");
    sc_trace(mVcdFile, tmp_25_reg_762, "tmp_25_reg_762");
    sc_trace(mVcdFile, tmp_20_fu_443_p2, "tmp_20_fu_443_p2");
    sc_trace(mVcdFile, tmp_20_reg_768, "tmp_20_reg_768");
    sc_trace(mVcdFile, ap_CS_fsm_state47, "ap_CS_fsm_state47");
    sc_trace(mVcdFile, tmp_26_fu_451_p2, "tmp_26_fu_451_p2");
    sc_trace(mVcdFile, tmp_26_reg_773, "tmp_26_reg_773");
    sc_trace(mVcdFile, sel_tmp2_fu_460_p2, "sel_tmp2_fu_460_p2");
    sc_trace(mVcdFile, sel_tmp8_fu_510_p2, "sel_tmp8_fu_510_p2");
    sc_trace(mVcdFile, sel_tmp8_reg_784, "sel_tmp8_reg_784");
    sc_trace(mVcdFile, sel_tmp3_fu_522_p2, "sel_tmp3_fu_522_p2");
    sc_trace(mVcdFile, sel_tmp5_fu_534_p2, "sel_tmp5_fu_534_p2");
    sc_trace(mVcdFile, wait_flag_1_fu_539_p2, "wait_flag_1_fu_539_p2");
    sc_trace(mVcdFile, wait_flag_1_reg_801, "wait_flag_1_reg_801");
    sc_trace(mVcdFile, ap_CS_fsm_state48, "ap_CS_fsm_state48");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, not_or_cond_fu_573_p2, "not_or_cond_fu_573_p2");
    sc_trace(mVcdFile, not_or_cond_reg_810, "not_or_cond_reg_810");
    sc_trace(mVcdFile, resultAmplitude_7_fu_593_p3, "resultAmplitude_7_fu_593_p3");
    sc_trace(mVcdFile, resultAmplitude_7_reg_815, "resultAmplitude_7_reg_815");
    sc_trace(mVcdFile, resultAmplitude_fu_600_p3, "resultAmplitude_fu_600_p3");
    sc_trace(mVcdFile, releaseTime_flag_reg_123, "releaseTime_flag_reg_123");
    sc_trace(mVcdFile, releaseTime_loc_reg_136, "releaseTime_loc_reg_136");
    sc_trace(mVcdFile, sustainTime_loc_reg_145, "sustainTime_loc_reg_145");
    sc_trace(mVcdFile, releaseTime_new_1_re_fu_385_p3, "releaseTime_new_1_re_fu_385_p3");
    sc_trace(mVcdFile, releaseTime_flag_1_s_fu_379_p2, "releaseTime_flag_1_s_fu_379_p2");
    sc_trace(mVcdFile, tmp_31_fu_543_p2, "tmp_31_fu_543_p2");
    sc_trace(mVcdFile, grp_fu_154_p0, "grp_fu_154_p0");
    sc_trace(mVcdFile, grp_fu_154_p1, "grp_fu_154_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state58, "ap_CS_fsm_state58");
    sc_trace(mVcdFile, grp_fu_160_p0, "grp_fu_160_p0");
    sc_trace(mVcdFile, grp_fu_160_p1, "grp_fu_160_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state63, "ap_CS_fsm_state63");
    sc_trace(mVcdFile, grp_fu_164_p0, "grp_fu_164_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_173_p0, "grp_fu_173_p0");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, sustainAmplitude_to_s_fu_213_p1, "sustainAmplitude_to_s_fu_213_p1");
    sc_trace(mVcdFile, tmp_5_fu_216_p4, "tmp_5_fu_216_p4");
    sc_trace(mVcdFile, tmp_fu_226_p1, "tmp_fu_226_p1");
    sc_trace(mVcdFile, notrhs_fu_236_p2, "notrhs_fu_236_p2");
    sc_trace(mVcdFile, notlhs_fu_230_p2, "notlhs_fu_230_p2");
    sc_trace(mVcdFile, tmp_30_fu_242_p2, "tmp_30_fu_242_p2");
    sc_trace(mVcdFile, tmp_33_fu_248_p2, "tmp_33_fu_248_p2");
    sc_trace(mVcdFile, tmp_6_fu_264_p2, "tmp_6_fu_264_p2");
    sc_trace(mVcdFile, tmp_9_to_int_fu_293_p1, "tmp_9_to_int_fu_293_p1");
    sc_trace(mVcdFile, tmp_9_neg_fu_296_p2, "tmp_9_neg_fu_296_p2");
    sc_trace(mVcdFile, tmp_13_fu_333_p2, "tmp_13_fu_333_p2");
    sc_trace(mVcdFile, tmp_12_fu_327_p2, "tmp_12_fu_327_p2");
    sc_trace(mVcdFile, tmp_34_fu_359_p2, "tmp_34_fu_359_p2");
    sc_trace(mVcdFile, tmp1_fu_374_p2, "tmp1_fu_374_p2");
    sc_trace(mVcdFile, tmp_14_fu_365_p2, "tmp_14_fu_365_p2");
    sc_trace(mVcdFile, releaseTime_new_1_fu_339_p3, "releaseTime_new_1_fu_339_p3");
    sc_trace(mVcdFile, releaseTime_loc_1_fu_345_p3, "releaseTime_loc_1_fu_345_p3");
    sc_trace(mVcdFile, sustainTime_new_1_fu_352_p3, "sustainTime_new_1_fu_352_p3");
    sc_trace(mVcdFile, releaseTime_loc_1_re_fu_392_p3, "releaseTime_loc_1_re_fu_392_p3");
    sc_trace(mVcdFile, not_tmp_s_fu_455_p2, "not_tmp_s_fu_455_p2");
    sc_trace(mVcdFile, tmp_24_fu_447_p2, "tmp_24_fu_447_p2");
    sc_trace(mVcdFile, sel_tmp6_demorgan_fu_471_p2, "sel_tmp6_demorgan_fu_471_p2");
    sc_trace(mVcdFile, tmp_24_not_fu_475_p2, "tmp_24_not_fu_475_p2");
    sc_trace(mVcdFile, sel_tmp13_demorgan_fu_487_p2, "sel_tmp13_demorgan_fu_487_p2");
    sc_trace(mVcdFile, tmp_25_not_fu_493_p2, "tmp_25_not_fu_493_p2");
    sc_trace(mVcdFile, not_sel_tmp7_fu_481_p2, "not_sel_tmp7_fu_481_p2");
    sc_trace(mVcdFile, not_sel_tmp_fu_498_p2, "not_sel_tmp_fu_498_p2");
    sc_trace(mVcdFile, tmp2_fu_504_p2, "tmp2_fu_504_p2");
    sc_trace(mVcdFile, sel_tmp_fu_465_p2, "sel_tmp_fu_465_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_516_p2, "sel_tmp1_fu_516_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_528_p2, "sel_tmp4_fu_528_p2");
    sc_trace(mVcdFile, or_cond_fu_559_p2, "or_cond_fu_559_p2");
    sc_trace(mVcdFile, or_cond1_fu_563_p2, "or_cond1_fu_563_p2");
    sc_trace(mVcdFile, or_cond2_fu_567_p2, "or_cond2_fu_567_p2");
    sc_trace(mVcdFile, resultAmplitude_5_fu_579_p3, "resultAmplitude_5_fu_579_p3");
    sc_trace(mVcdFile, resultAmplitude_6_fu_586_p3, "resultAmplitude_6_fu_586_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("envelope.hdltvin.dat");
    mHdltvoutHandle.open("envelope.hdltvout.dat");
}

envelope::~envelope() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete envelope_CTRL_BUS_s_axi_U;
    delete envelope_fadd_32nbkb_U1;
    delete envelope_fmul_32ncud_U2;
    delete envelope_fdiv_32ndEe_U3;
    delete envelope_fdiv_32ndEe_U4;
    delete envelope_sitofp_3eOg_U5;
    delete envelope_sitofp_3eOg_U6;
    delete envelope_fcmp_32nfYi_U7;
}

void envelope::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void envelope::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_3F800000;
}

void envelope::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_2;
}

void envelope::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_4_reg_689.read()))) {
        releaseTime_flag_reg_123 = ap_const_lv1_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_4_fu_275_p2.read()))) {
        releaseTime_flag_reg_123 = ap_const_lv1_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_4_reg_689.read()))) {
        releaseTime_loc_reg_136 = releaseDuration_read_reg_612.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_4_fu_275_p2.read()))) {
        releaseTime_loc_reg_136 = releaseTime.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_4_reg_689.read()))) {
        sustainTime_loc_reg_145 = grp_fu_184_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_4_fu_275_p2.read()))) {
        sustainTime_loc_reg_145 = sustainTime.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_in_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_out.read()))) {
            wave_in_V_0_sel_rd =  (sc_logic) (~wave_in_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_in_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_in.read()))) {
            wave_in_V_0_sel_wr =  (sc_logic) (~wave_in_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_in_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_2)))) {
            wave_in_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_1)))) {
            wave_in_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(wave_in_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, wave_in_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_ack_out.read()))))) {
            wave_in_V_0_state = ap_const_lv2_3;
        } else {
            wave_in_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_out_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_out.read()))) {
            wave_out_V_1_sel_rd =  (sc_logic) (~wave_out_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_out_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_in.read()))) {
            wave_out_V_1_sel_wr =  (sc_logic) (~wave_out_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        wave_out_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, wave_out_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, wave_out_V_1_state.read())))) {
            wave_out_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, wave_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, wave_out_V_1_state.read())))) {
            wave_out_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, wave_out_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, wave_out_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, wave_out_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, wave_out_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_ack_out.read()))))) {
            wave_out_V_1_state = ap_const_lv2_3;
        } else {
            wave_out_V_1_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        attackDuration_read_reg_636 = attackDuration.read();
        decayDuration_read_reg_629 = decayDuration.read();
        press_read_reg_643 = press.read();
        releaseDuration_read_reg_612 = releaseDuration.read();
        sustainAmplitude_rea_reg_621 = sustainAmplitude.read();
        tmp_3_reg_649 = tmp_3_fu_207_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        attackSlope_reg_664 = grp_fu_164_p2.read();
        decaySlope_reg_669 = grp_fu_169_p2.read();
        or_cond_4_reg_689 = or_cond_4_fu_275_p2.read();
        sustainAmplitude_ass_reg_674 = sustainAmplitude_ass_fu_253_p3.read();
        tmp_7_reg_681 = tmp_7_fu_270_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read())) {
        lastpress = press_read_reg_643.read();
        not_tmp_7_reg_718 = not_tmp_7_fu_318_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())) {
        not_or_cond_reg_810 = not_or_cond_fu_573_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read())))) {
        reg_189 = grp_fu_173_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state62.read())))) {
        reg_195 = grp_fu_154_p2.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) || (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state57.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read())))) {
        reg_201 = grp_fu_160_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state45.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_4_reg_689.read()))) {
        releaseSlope = grp_fu_164_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, releaseTime_flag_1_s_fu_379_p2.read()))) {
        releaseTime = releaseTime_new_1_re_fu_385_p3.read();
        sustainTime = sustainTime_new_1_tm_fu_399_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state66.read()))) {
        resultAmplitude_7_reg_815 = resultAmplitude_7_fu_593_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state47.read())) {
        sel_tmp2_reg_778 = sel_tmp2_fu_460_p2.read();
        sel_tmp3_reg_789 = sel_tmp3_fu_522_p2.read();
        sel_tmp5_reg_795 = sel_tmp5_fu_534_p2.read();
        sel_tmp8_reg_784 = sel_tmp8_fu_510_p2.read();
        tmp_20_reg_768 = tmp_20_fu_443_p2.read();
        tmp_26_reg_773 = tmp_26_fu_451_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1))) {
        sustainTime_new_1_tm_reg_733 = sustainTime_new_1_tm_fu_399_p3.read();
        time_load_s_reg_739 = time_load_s_fu_407_p3.read();
        tmp_16_reg_748 = tmp_16_fu_415_p2.read();
        tmp_19_reg_756 = tmp_19_fu_432_p2.read();
        tmp_25_reg_762 = tmp_25_fu_437_p2.read();
        tmp_36_reg_725 = wave_in_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read())) {
        time_r = tmp_31_fu_543_p2.read();
        wait_flag_1_reg_801 = wait_flag_1_fu_539_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        tmp_32_reg_659 = tmp_32_fu_179_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_4_reg_654 = grp_fu_176_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, or_cond_4_fu_275_p2.read()))) {
        tmp_s_reg_703 = tmp_s_fu_289_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) && esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, wait_flag_1_reg_801.read()))) {
        wait_r = not_or_cond_reg_810.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_load_A.read())) {
        wave_in_V_0_payload_A = wave_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_load_B.read())) {
        wave_in_V_0_payload_B = wave_in_V_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_load_A.read())) {
        wave_out_V_1_payload_A = resultAmplitude_fu_600_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_load_B.read())) {
        wave_out_V_1_payload_B = resultAmplitude_fu_600_p3.read();
    }
}

void envelope::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void envelope::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void envelope::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void envelope::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void envelope::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void envelope::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void envelope::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void envelope::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void envelope::thread_ap_CS_fsm_state45() {
    ap_CS_fsm_state45 = ap_CS_fsm.read()[44];
}

void envelope::thread_ap_CS_fsm_state46() {
    ap_CS_fsm_state46 = ap_CS_fsm.read()[45];
}

void envelope::thread_ap_CS_fsm_state47() {
    ap_CS_fsm_state47 = ap_CS_fsm.read()[46];
}

void envelope::thread_ap_CS_fsm_state48() {
    ap_CS_fsm_state48 = ap_CS_fsm.read()[47];
}

void envelope::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void envelope::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void envelope::thread_ap_CS_fsm_state57() {
    ap_CS_fsm_state57 = ap_CS_fsm.read()[56];
}

void envelope::thread_ap_CS_fsm_state58() {
    ap_CS_fsm_state58 = ap_CS_fsm.read()[57];
}

void envelope::thread_ap_CS_fsm_state62() {
    ap_CS_fsm_state62 = ap_CS_fsm.read()[61];
}

void envelope::thread_ap_CS_fsm_state63() {
    ap_CS_fsm_state63 = ap_CS_fsm.read()[62];
}

void envelope::thread_ap_CS_fsm_state66() {
    ap_CS_fsm_state66 = ap_CS_fsm.read()[65];
}

void envelope::thread_ap_CS_fsm_state67() {
    ap_CS_fsm_state67 = ap_CS_fsm.read()[66];
}

void envelope::thread_ap_CS_fsm_state68() {
    ap_CS_fsm_state68 = ap_CS_fsm.read()[67];
}

void envelope::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void envelope::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void envelope::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void envelope::thread_grp_fu_154_p0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read())))) {
        grp_fu_154_p0 = reg_201.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_154_p0 = sustainAmplitude_rea_reg_621.read();
    } else {
        grp_fu_154_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_154_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()))) {
        grp_fu_154_p1 = sustainAmplitude_ass_reg_674.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state58.read()))) {
        grp_fu_154_p1 = ap_const_lv32_3F800000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        grp_fu_154_p1 = ap_const_lv32_BF800000;
    } else {
        grp_fu_154_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_160_p0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_789.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())))) {
        grp_fu_160_p0 = tmp_36_reg_725.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_160_p0 = releaseSlope.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_160_p0 = decaySlope_reg_669.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()))) {
        grp_fu_160_p0 = attackSlope_reg_664.read();
    } else {
        grp_fu_160_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_160_p1() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp3_reg_789.read()))) {
        grp_fu_160_p1 = sustainAmplitude_ass_reg_674.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read())))) {
        grp_fu_160_p1 = reg_195.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state63.read()))) {
        grp_fu_160_p1 = reg_201.read();
    } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())) || 
                (esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read())))) {
        grp_fu_160_p1 = reg_189.read();
    } else {
        grp_fu_160_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_164_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        grp_fu_164_p0 = tmp_9_fu_302_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        grp_fu_164_p0 = ap_const_lv32_3F800000;
    } else {
        grp_fu_164_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_173_p0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp5_reg_795.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        grp_fu_173_p0 = tmp_26_reg_773.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, sel_tmp2_reg_778.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        grp_fu_173_p0 = tmp_20_reg_768.read();
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, tmp_16_reg_748.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp2_reg_778.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp3_reg_789.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, sel_tmp5_reg_795.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state48.read()))) {
        grp_fu_173_p0 = time_load_s_reg_739.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        grp_fu_173_p0 = tmp_s_reg_703.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        grp_fu_173_p0 = attackDuration_read_reg_636.read();
    } else {
        grp_fu_173_p0 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void envelope::thread_grp_fu_184_p2() {
    grp_fu_184_p2 = (!decayDuration_read_reg_629.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(decayDuration_read_reg_629.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_not_or_cond_fu_573_p2() {
    not_or_cond_fu_573_p2 = (or_cond2_fu_567_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_not_sel_tmp7_fu_481_p2() {
    not_sel_tmp7_fu_481_p2 = (sel_tmp6_demorgan_fu_471_p2.read() | tmp_24_not_fu_475_p2.read());
}

void envelope::thread_not_sel_tmp_fu_498_p2() {
    not_sel_tmp_fu_498_p2 = (sel_tmp13_demorgan_fu_487_p2.read() | tmp_25_not_fu_493_p2.read());
}

void envelope::thread_not_tmp_7_fu_318_p2() {
    not_tmp_7_fu_318_p2 = (tmp_7_reg_681.read() ^ ap_const_lv1_1);
}

void envelope::thread_not_tmp_s_fu_455_p2() {
    not_tmp_s_fu_455_p2 = (tmp_16_reg_748.read() ^ ap_const_lv1_1);
}

void envelope::thread_notlhs_fu_230_p2() {
    notlhs_fu_230_p2 = (!tmp_5_fu_216_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_216_p4.read() != ap_const_lv8_FF);
}

void envelope::thread_notrhs_fu_236_p2() {
    notrhs_fu_236_p2 = (!tmp_fu_226_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_226_p1.read() == ap_const_lv23_0);
}

void envelope::thread_or_cond1_fu_563_p2() {
    or_cond1_fu_563_p2 = (sel_tmp2_reg_778.read() | tmp_16_reg_748.read());
}

void envelope::thread_or_cond2_fu_567_p2() {
    or_cond2_fu_567_p2 = (or_cond_fu_559_p2.read() | or_cond1_fu_563_p2.read());
}

void envelope::thread_or_cond_4_fu_275_p2() {
    or_cond_4_fu_275_p2 = (tmp_6_fu_264_p2.read() | tmp_7_fu_270_p2.read());
}

void envelope::thread_or_cond_fu_559_p2() {
    or_cond_fu_559_p2 = (sel_tmp5_reg_795.read() | sel_tmp3_reg_789.read());
}

void envelope::thread_releaseTime_flag_1_s_fu_379_p2() {
    releaseTime_flag_1_s_fu_379_p2 = (tmp1_fu_374_p2.read() | releaseTime_flag_reg_123.read());
}

void envelope::thread_releaseTime_loc_1_fu_345_p3() {
    releaseTime_loc_1_fu_345_p3 = (!tmp_7_reg_681.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_681.read()[0].to_bool())? releaseTime_loc_reg_136.read(): tmp_13_fu_333_p2.read());
}

void envelope::thread_releaseTime_loc_1_re_fu_392_p3() {
    releaseTime_loc_1_re_fu_392_p3 = (!tmp_14_fu_365_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_14_fu_365_p2.read()[0].to_bool())? releaseTime_loc_1_fu_345_p3.read(): releaseDuration_read_reg_612.read());
}

void envelope::thread_releaseTime_new_1_fu_339_p3() {
    releaseTime_new_1_fu_339_p3 = (!tmp_7_reg_681.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_681.read()[0].to_bool())? releaseDuration_read_reg_612.read(): tmp_13_fu_333_p2.read());
}

void envelope::thread_releaseTime_new_1_re_fu_385_p3() {
    releaseTime_new_1_re_fu_385_p3 = (!tmp_14_fu_365_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_14_fu_365_p2.read()[0].to_bool())? releaseTime_new_1_fu_339_p3.read(): releaseDuration_read_reg_612.read());
}

void envelope::thread_resultAmplitude_5_fu_579_p3() {
    resultAmplitude_5_fu_579_p3 = (!tmp_16_reg_748.read()[0].is_01())? sc_lv<32>(): ((tmp_16_reg_748.read()[0].to_bool())? grp_fu_160_p2.read(): ap_const_lv32_0);
}

void envelope::thread_resultAmplitude_6_fu_586_p3() {
    resultAmplitude_6_fu_586_p3 = (!sel_tmp2_reg_778.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_reg_778.read()[0].to_bool())? grp_fu_160_p2.read(): resultAmplitude_5_fu_579_p3.read());
}

void envelope::thread_resultAmplitude_7_fu_593_p3() {
    resultAmplitude_7_fu_593_p3 = (!sel_tmp3_reg_789.read()[0].is_01())? sc_lv<32>(): ((sel_tmp3_reg_789.read()[0].to_bool())? grp_fu_160_p2.read(): resultAmplitude_6_fu_586_p3.read());
}

void envelope::thread_resultAmplitude_fu_600_p3() {
    resultAmplitude_fu_600_p3 = (!sel_tmp5_reg_795.read()[0].is_01())? sc_lv<32>(): ((sel_tmp5_reg_795.read()[0].to_bool())? reg_201.read(): resultAmplitude_7_reg_815.read());
}

void envelope::thread_sel_tmp13_demorgan_fu_487_p2() {
    sel_tmp13_demorgan_fu_487_p2 = (sel_tmp6_demorgan_fu_471_p2.read() | tmp_24_fu_447_p2.read());
}

void envelope::thread_sel_tmp1_fu_516_p2() {
    sel_tmp1_fu_516_p2 = (sel_tmp6_demorgan_fu_471_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_sel_tmp2_fu_460_p2() {
    sel_tmp2_fu_460_p2 = (tmp_19_reg_756.read() & not_tmp_s_fu_455_p2.read());
}

void envelope::thread_sel_tmp3_fu_522_p2() {
    sel_tmp3_fu_522_p2 = (tmp_24_fu_447_p2.read() & sel_tmp1_fu_516_p2.read());
}

void envelope::thread_sel_tmp4_fu_528_p2() {
    sel_tmp4_fu_528_p2 = (sel_tmp13_demorgan_fu_487_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_sel_tmp5_fu_534_p2() {
    sel_tmp5_fu_534_p2 = (tmp_25_reg_762.read() & sel_tmp4_fu_528_p2.read());
}

void envelope::thread_sel_tmp6_demorgan_fu_471_p2() {
    sel_tmp6_demorgan_fu_471_p2 = (tmp_16_reg_748.read() | tmp_19_reg_756.read());
}

void envelope::thread_sel_tmp8_fu_510_p2() {
    sel_tmp8_fu_510_p2 = (tmp2_fu_504_p2.read() & sel_tmp_fu_465_p2.read());
}

void envelope::thread_sel_tmp_fu_465_p2() {
    sel_tmp_fu_465_p2 = (sel_tmp2_fu_460_p2.read() ^ not_tmp_s_fu_455_p2.read());
}

void envelope::thread_sustainAmplitude_ass_fu_253_p3() {
    sustainAmplitude_ass_fu_253_p3 = (!tmp_33_fu_248_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_33_fu_248_p2.read()[0].to_bool())? ap_const_lv32_3F800000: sustainAmplitude_rea_reg_621.read());
}

void envelope::thread_sustainAmplitude_to_s_fu_213_p1() {
    sustainAmplitude_to_s_fu_213_p1 = sustainAmplitude_rea_reg_621.read();
}

void envelope::thread_sustainTime_new_1_fu_352_p3() {
    sustainTime_new_1_fu_352_p3 = (!tmp_7_reg_681.read()[0].is_01())? sc_lv<32>(): ((tmp_7_reg_681.read()[0].to_bool())? sustainTime_loc_reg_145.read(): tmp_12_fu_327_p2.read());
}

void envelope::thread_sustainTime_new_1_tm_fu_399_p3() {
    sustainTime_new_1_tm_fu_399_p3 = (!tmp_14_fu_365_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_14_fu_365_p2.read()[0].to_bool())? sustainTime_new_1_fu_352_p3.read(): grp_fu_184_p2.read());
}

void envelope::thread_time_load_s_fu_407_p3() {
    time_load_s_fu_407_p3 = (!tmp_14_fu_365_p2.read()[0].is_01())? sc_lv<32>(): ((tmp_14_fu_365_p2.read()[0].to_bool())? time_r.read(): ap_const_lv32_0);
}

void envelope::thread_tmp1_fu_374_p2() {
    tmp1_fu_374_p2 = (wait_r.read() | not_tmp_7_reg_718.read());
}

void envelope::thread_tmp2_fu_504_p2() {
    tmp2_fu_504_p2 = (not_sel_tmp7_fu_481_p2.read() & not_sel_tmp_fu_498_p2.read());
}

void envelope::thread_tmp_12_fu_327_p2() {
    tmp_12_fu_327_p2 = (!sustainTime_loc_reg_145.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(sustainTime_loc_reg_145.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_tmp_13_fu_333_p2() {
    tmp_13_fu_333_p2 = (!releaseTime_loc_reg_136.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(releaseTime_loc_reg_136.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_tmp_14_fu_365_p2() {
    tmp_14_fu_365_p2 = (tmp_34_fu_359_p2.read() | not_tmp_7_reg_718.read());
}

void envelope::thread_tmp_16_fu_415_p2() {
    tmp_16_fu_415_p2 = (!time_load_s_fu_407_p3.read().is_01() || !attackDuration_read_reg_636.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_load_s_fu_407_p3.read()) < sc_bigint<32>(attackDuration_read_reg_636.read()));
}

void envelope::thread_tmp_19_fu_432_p2() {
    tmp_19_fu_432_p2 = (!time_load_s_fu_407_p3.read().is_01() || !decayDuration_read_reg_629.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_load_s_fu_407_p3.read()) < sc_bigint<32>(decayDuration_read_reg_629.read()));
}

void envelope::thread_tmp_20_fu_443_p2() {
    tmp_20_fu_443_p2 = (!time_load_s_reg_739.read().is_01() || !attackDuration_read_reg_636.read().is_01())? sc_lv<32>(): (sc_biguint<32>(time_load_s_reg_739.read()) - sc_biguint<32>(attackDuration_read_reg_636.read()));
}

void envelope::thread_tmp_24_fu_447_p2() {
    tmp_24_fu_447_p2 = (!time_load_s_reg_739.read().is_01() || !sustainTime_new_1_tm_reg_733.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_load_s_reg_739.read()) < sc_bigint<32>(sustainTime_new_1_tm_reg_733.read()));
}

void envelope::thread_tmp_24_not_fu_475_p2() {
    tmp_24_not_fu_475_p2 = (tmp_24_fu_447_p2.read() ^ ap_const_lv1_1);
}

void envelope::thread_tmp_25_fu_437_p2() {
    tmp_25_fu_437_p2 = (!time_load_s_fu_407_p3.read().is_01() || !releaseTime_loc_1_re_fu_392_p3.read().is_01())? sc_lv<1>(): (sc_bigint<32>(time_load_s_fu_407_p3.read()) < sc_bigint<32>(releaseTime_loc_1_re_fu_392_p3.read()));
}

void envelope::thread_tmp_25_not_fu_493_p2() {
    tmp_25_not_fu_493_p2 = (tmp_25_reg_762.read() ^ ap_const_lv1_1);
}

void envelope::thread_tmp_26_fu_451_p2() {
    tmp_26_fu_451_p2 = (!time_load_s_reg_739.read().is_01() || !sustainTime_new_1_tm_reg_733.read().is_01())? sc_lv<32>(): (sc_biguint<32>(time_load_s_reg_739.read()) - sc_biguint<32>(sustainTime_new_1_tm_reg_733.read()));
}

void envelope::thread_tmp_30_fu_242_p2() {
    tmp_30_fu_242_p2 = (notrhs_fu_236_p2.read() | notlhs_fu_230_p2.read());
}

void envelope::thread_tmp_31_fu_543_p2() {
    tmp_31_fu_543_p2 = (!time_load_s_reg_739.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(time_load_s_reg_739.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void envelope::thread_tmp_33_fu_248_p2() {
    tmp_33_fu_248_p2 = (tmp_30_fu_242_p2.read() & tmp_32_reg_659.read());
}

void envelope::thread_tmp_34_fu_359_p2() {
    tmp_34_fu_359_p2 = (wait_r.read() ^ ap_const_lv1_1);
}

void envelope::thread_tmp_3_fu_207_p2() {
    tmp_3_fu_207_p2 = (!decayDuration.read().is_01() || !attackDuration.read().is_01())? sc_lv<32>(): (sc_biguint<32>(decayDuration.read()) - sc_biguint<32>(attackDuration.read()));
}

void envelope::thread_tmp_5_fu_216_p4() {
    tmp_5_fu_216_p4 = sustainAmplitude_to_s_fu_213_p1.read().range(30, 23);
}

void envelope::thread_tmp_6_fu_264_p2() {
    tmp_6_fu_264_p2 = (!lastpress.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(lastpress.read() != ap_const_lv32_0);
}

void envelope::thread_tmp_7_fu_270_p2() {
    tmp_7_fu_270_p2 = (!press_read_reg_643.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(press_read_reg_643.read() == ap_const_lv32_0);
}

void envelope::thread_tmp_9_fu_302_p1() {
    tmp_9_fu_302_p1 = tmp_9_neg_fu_296_p2.read();
}

void envelope::thread_tmp_9_neg_fu_296_p2() {
    tmp_9_neg_fu_296_p2 = (tmp_9_to_int_fu_293_p1.read() ^ ap_const_lv32_80000000);
}

void envelope::thread_tmp_9_to_int_fu_293_p1() {
    tmp_9_to_int_fu_293_p1 = sustainAmplitude_ass_reg_674.read();
}

void envelope::thread_tmp_fu_226_p1() {
    tmp_fu_226_p1 = sustainAmplitude_to_s_fu_213_p1.read().range(23-1, 0);
}

void envelope::thread_tmp_s_fu_289_p2() {
    tmp_s_fu_289_p2 = (!releaseDuration_read_reg_612.read().is_01() || !decayDuration_read_reg_629.read().is_01())? sc_lv<32>(): (sc_biguint<32>(releaseDuration_read_reg_612.read()) - sc_biguint<32>(decayDuration_read_reg_629.read()));
}

void envelope::thread_wait_flag_1_fu_539_p2() {
    wait_flag_1_fu_539_p2 = (sel_tmp8_reg_784.read() | not_tmp_7_reg_718.read());
}

void envelope::thread_wave_in_V_0_ack_in() {
    wave_in_V_0_ack_in = wave_in_V_0_state.read()[1];
}

void envelope::thread_wave_in_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && 
         esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1))) {
        wave_in_V_0_ack_out = ap_const_logic_1;
    } else {
        wave_in_V_0_ack_out = ap_const_logic_0;
    }
}

void envelope::thread_wave_in_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_in_V_0_sel.read())) {
        wave_in_V_0_data_out = wave_in_V_0_payload_B.read();
    } else {
        wave_in_V_0_data_out = wave_in_V_0_payload_A.read();
    }
}

void envelope::thread_wave_in_V_0_load_A() {
    wave_in_V_0_load_A = (wave_in_V_0_state_cmp_full.read() & ~wave_in_V_0_sel_wr.read());
}

void envelope::thread_wave_in_V_0_load_B() {
    wave_in_V_0_load_B = (wave_in_V_0_sel_wr.read() & wave_in_V_0_state_cmp_full.read());
}

void envelope::thread_wave_in_V_0_sel() {
    wave_in_V_0_sel = wave_in_V_0_sel_rd.read();
}

void envelope::thread_wave_in_V_0_state_cmp_full() {
    wave_in_V_0_state_cmp_full =  (sc_logic) ((!wave_in_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(wave_in_V_0_state.read() != ap_const_lv2_1))[0];
}

void envelope::thread_wave_in_V_0_vld_in() {
    wave_in_V_0_vld_in = wave_in_V_TVALID.read();
}

void envelope::thread_wave_in_V_0_vld_out() {
    wave_in_V_0_vld_out = wave_in_V_0_state.read()[0];
}

void envelope::thread_wave_in_V_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read())) {
        wave_in_V_TDATA_blk_n = wave_in_V_0_state.read()[0];
    } else {
        wave_in_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void envelope::thread_wave_in_V_TREADY() {
    wave_in_V_TREADY = wave_in_V_0_state.read()[1];
}

void envelope::thread_wave_out_V_1_ack_in() {
    wave_out_V_1_ack_in = wave_out_V_1_state.read()[1];
}

void envelope::thread_wave_out_V_1_ack_out() {
    wave_out_V_1_ack_out = wave_out_V_TREADY.read();
}

void envelope::thread_wave_out_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, wave_out_V_1_sel.read())) {
        wave_out_V_1_data_out = wave_out_V_1_payload_B.read();
    } else {
        wave_out_V_1_data_out = wave_out_V_1_payload_A.read();
    }
}

void envelope::thread_wave_out_V_1_load_A() {
    wave_out_V_1_load_A = (wave_out_V_1_state_cmp_full.read() & ~wave_out_V_1_sel_wr.read());
}

void envelope::thread_wave_out_V_1_load_B() {
    wave_out_V_1_load_B = (wave_out_V_1_sel_wr.read() & wave_out_V_1_state_cmp_full.read());
}

void envelope::thread_wave_out_V_1_sel() {
    wave_out_V_1_sel = wave_out_V_1_sel_rd.read();
}

void envelope::thread_wave_out_V_1_state_cmp_full() {
    wave_out_V_1_state_cmp_full =  (sc_logic) ((!wave_out_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(wave_out_V_1_state.read() != ap_const_lv2_1))[0];
}

void envelope::thread_wave_out_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && 
         esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1))) {
        wave_out_V_1_vld_in = ap_const_logic_1;
    } else {
        wave_out_V_1_vld_in = ap_const_logic_0;
    }
}

void envelope::thread_wave_out_V_1_vld_out() {
    wave_out_V_1_vld_out = wave_out_V_1_state.read()[0];
}

void envelope::thread_wave_out_V_TDATA() {
    wave_out_V_TDATA = wave_out_V_1_data_out.read();
}

void envelope::thread_wave_out_V_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()))) {
        wave_out_V_TDATA_blk_n = wave_out_V_1_state.read()[1];
    } else {
        wave_out_V_TDATA_blk_n = ap_const_logic_1;
    }
}

void envelope::thread_wave_out_V_TVALID() {
    wave_out_V_TVALID = wave_out_V_1_state.read()[0];
}

void envelope::thread_ap_NS_fsm() {
    if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state1))
    {
        ap_NS_fsm = ap_ST_fsm_state2;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state2))
    {
        ap_NS_fsm = ap_ST_fsm_state3;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state3))
    {
        ap_NS_fsm = ap_ST_fsm_state4;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state4))
    {
        ap_NS_fsm = ap_ST_fsm_state5;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state5))
    {
        ap_NS_fsm = ap_ST_fsm_state6;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state6))
    {
        ap_NS_fsm = ap_ST_fsm_state7;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state7))
    {
        ap_NS_fsm = ap_ST_fsm_state8;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state8))
    {
        ap_NS_fsm = ap_ST_fsm_state9;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state9))
    {
        ap_NS_fsm = ap_ST_fsm_state10;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state10))
    {
        ap_NS_fsm = ap_ST_fsm_state11;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state11))
    {
        ap_NS_fsm = ap_ST_fsm_state12;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state12))
    {
        ap_NS_fsm = ap_ST_fsm_state13;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state13))
    {
        ap_NS_fsm = ap_ST_fsm_state14;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state14))
    {
        ap_NS_fsm = ap_ST_fsm_state15;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state15))
    {
        ap_NS_fsm = ap_ST_fsm_state16;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state16))
    {
        ap_NS_fsm = ap_ST_fsm_state17;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state17))
    {
        ap_NS_fsm = ap_ST_fsm_state18;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state18))
    {
        ap_NS_fsm = ap_ST_fsm_state19;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state19))
    {
        ap_NS_fsm = ap_ST_fsm_state20;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state20))
    {
        ap_NS_fsm = ap_ST_fsm_state21;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state21))
    {
        ap_NS_fsm = ap_ST_fsm_state22;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state22))
    {
        ap_NS_fsm = ap_ST_fsm_state23;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state23))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, or_cond_4_fu_275_p2.read()))) {
            ap_NS_fsm = ap_ST_fsm_state45;
        } else {
            ap_NS_fsm = ap_ST_fsm_state24;
        }
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state24))
    {
        ap_NS_fsm = ap_ST_fsm_state25;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state25))
    {
        ap_NS_fsm = ap_ST_fsm_state26;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state26))
    {
        ap_NS_fsm = ap_ST_fsm_state27;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state27))
    {
        ap_NS_fsm = ap_ST_fsm_state28;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state28))
    {
        ap_NS_fsm = ap_ST_fsm_state29;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state29))
    {
        ap_NS_fsm = ap_ST_fsm_state30;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state30))
    {
        ap_NS_fsm = ap_ST_fsm_state31;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state31))
    {
        ap_NS_fsm = ap_ST_fsm_state32;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state32))
    {
        ap_NS_fsm = ap_ST_fsm_state33;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state33))
    {
        ap_NS_fsm = ap_ST_fsm_state34;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state34))
    {
        ap_NS_fsm = ap_ST_fsm_state35;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state35))
    {
        ap_NS_fsm = ap_ST_fsm_state36;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state36))
    {
        ap_NS_fsm = ap_ST_fsm_state37;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state37))
    {
        ap_NS_fsm = ap_ST_fsm_state38;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state38))
    {
        ap_NS_fsm = ap_ST_fsm_state39;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state39))
    {
        ap_NS_fsm = ap_ST_fsm_state40;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state40))
    {
        ap_NS_fsm = ap_ST_fsm_state41;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state41))
    {
        ap_NS_fsm = ap_ST_fsm_state42;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state42))
    {
        ap_NS_fsm = ap_ST_fsm_state43;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state43))
    {
        ap_NS_fsm = ap_ST_fsm_state44;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state44))
    {
        ap_NS_fsm = ap_ST_fsm_state45;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state45))
    {
        ap_NS_fsm = ap_ST_fsm_state46;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state46))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state46.read()) && esl_seteq<1,1,1>(wave_in_V_0_vld_out.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state47;
        } else {
            ap_NS_fsm = ap_ST_fsm_state46;
        }
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state47))
    {
        ap_NS_fsm = ap_ST_fsm_state48;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state48))
    {
        ap_NS_fsm = ap_ST_fsm_state49;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state49))
    {
        ap_NS_fsm = ap_ST_fsm_state50;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state50))
    {
        ap_NS_fsm = ap_ST_fsm_state51;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state51))
    {
        ap_NS_fsm = ap_ST_fsm_state52;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state52))
    {
        ap_NS_fsm = ap_ST_fsm_state53;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state53))
    {
        ap_NS_fsm = ap_ST_fsm_state54;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state54))
    {
        ap_NS_fsm = ap_ST_fsm_state55;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state55))
    {
        ap_NS_fsm = ap_ST_fsm_state56;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state56))
    {
        ap_NS_fsm = ap_ST_fsm_state57;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state57))
    {
        ap_NS_fsm = ap_ST_fsm_state58;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state58))
    {
        ap_NS_fsm = ap_ST_fsm_state59;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state59))
    {
        ap_NS_fsm = ap_ST_fsm_state60;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state60))
    {
        ap_NS_fsm = ap_ST_fsm_state61;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state61))
    {
        ap_NS_fsm = ap_ST_fsm_state62;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state62))
    {
        ap_NS_fsm = ap_ST_fsm_state63;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state63))
    {
        ap_NS_fsm = ap_ST_fsm_state64;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state64))
    {
        ap_NS_fsm = ap_ST_fsm_state65;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state65))
    {
        ap_NS_fsm = ap_ST_fsm_state66;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state66))
    {
        ap_NS_fsm = ap_ST_fsm_state67;
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state67))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state67.read()) && esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state68;
        } else {
            ap_NS_fsm = ap_ST_fsm_state67;
        }
    }
    else if (esl_seteq<1,68,68>(ap_CS_fsm.read(), ap_ST_fsm_state68))
    {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state68.read()) && esl_seteq<1,1,1>(wave_out_V_1_ack_in.read(), ap_const_logic_1))) {
            ap_NS_fsm = ap_ST_fsm_state1;
        } else {
            ap_NS_fsm = ap_ST_fsm_state68;
        }
    }
    else
    {
        ap_NS_fsm =  (sc_lv<68>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}
void envelope::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wave_in_V_TDATA\" :  \"" << wave_in_V_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wave_in_V_TVALID\" :  \"" << wave_in_V_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"wave_in_V_TREADY\" :  \"" << wave_in_V_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wave_out_V_TDATA\" :  \"" << wave_out_V_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"wave_out_V_TVALID\" :  \"" << wave_out_V_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"wave_out_V_TREADY\" :  \"" << wave_out_V_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

