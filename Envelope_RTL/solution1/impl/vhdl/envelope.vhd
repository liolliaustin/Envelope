-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity envelope is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    wave_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    wave_in_V_TVALID : IN STD_LOGIC;
    wave_in_V_TREADY : OUT STD_LOGIC;
    wave_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    wave_out_V_TVALID : OUT STD_LOGIC;
    wave_out_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of envelope is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "envelope,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.772000,HLS_SYN_LAT=58,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=4162,HLS_SYN_LUT=4732}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (88 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (88 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (88 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (88 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (88 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (88 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (88 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (88 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (88 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (88 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (88 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (88 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_40000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_FFFFFFFE : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal wave_in_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_in_V_0_vld_in : STD_LOGIC;
    signal wave_in_V_0_vld_out : STD_LOGIC;
    signal wave_in_V_0_ack_in : STD_LOGIC;
    signal wave_in_V_0_ack_out : STD_LOGIC;
    signal wave_in_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_in_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_in_V_0_sel_rd : STD_LOGIC := '0';
    signal wave_in_V_0_sel_wr : STD_LOGIC := '0';
    signal wave_in_V_0_sel : STD_LOGIC;
    signal wave_in_V_0_load_A : STD_LOGIC;
    signal wave_in_V_0_load_B : STD_LOGIC;
    signal wave_in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal wave_in_V_0_state_cmp_full : STD_LOGIC;
    signal wave_out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_out_V_1_vld_in : STD_LOGIC;
    signal wave_out_V_1_vld_out : STD_LOGIC;
    signal wave_out_V_1_ack_in : STD_LOGIC;
    signal wave_out_V_1_ack_out : STD_LOGIC;
    signal wave_out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_out_V_1_sel_rd : STD_LOGIC := '0';
    signal wave_out_V_1_sel_wr : STD_LOGIC := '0';
    signal wave_out_V_1_sel : STD_LOGIC;
    signal wave_out_V_1_load_A : STD_LOGIC;
    signal wave_out_V_1_load_B : STD_LOGIC;
    signal wave_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal wave_out_V_1_state_cmp_full : STD_LOGIC;
    signal press : STD_LOGIC_VECTOR (31 downto 0);
    signal attackDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal decayDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainAmplitude : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal guard_variable_for_e_4 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal attackSlope : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_e_3 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal decaySlope : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_e_2 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal releaseSlope : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_e_1 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal releaseTime : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal guard_variable_for_e : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal sustainTime : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wait_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal time_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wave_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (88 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal wave_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal grp_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal sel_tmp2_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_784 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_790 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_207 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal tmp_1_reg_749 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseDuration_read_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sustainDuration_read_reg_628 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainAmplitude_rea_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal decayDuration_read_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal attackDuration_read_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal press_read_reg_657 : STD_LOGIC_VECTOR (31 downto 0);
    signal guard_variable_for_e_load_fu_218_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_e_reg_663 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_e_1_load_fu_234_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_e_1_reg_667 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_4_i_fu_238_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal guard_variable_for_e_2_load_fu_259_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_e_2_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal tmp_i_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_685 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_i_reg_690 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal not_tmp_4_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_4_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_712 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_loc_1_fu_366_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_loc_1_reg_725 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_loc_1_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_loc_1_reg_733 : STD_LOGIC_VECTOR (31 downto 0);
    signal time_load_s_fu_406_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal time_load_s_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_757 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_436_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_763 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal tmp_17_fu_448_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_768 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_779 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wait_flag_1_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wait_flag_1_reg_796 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal tmp_2_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal not_or_cond_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal resultAmplitude_7_fu_602_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal resultAmplitude_7_reg_825 : STD_LOGIC_VECTOR (31 downto 0);
    signal resultAmplitude_fu_609_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_flag_reg_129 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_e_3_load_fu_284_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal releaseTime_loc_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_flag_reg_151 : STD_LOGIC_VECTOR (0 downto 0);
    signal guard_variable_for_e_4_load_fu_299_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sustainTime_loc_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_new_1_fu_359_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_flag_1_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sustainTime_new_1_fu_380_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_flag_1_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_178_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal grp_fu_182_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_fu_187_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal grp_fu_191_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_2_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_347_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_not_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_demorgan_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_not_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp7_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_572_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal resultAmplitude_5_fu_588_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal resultAmplitude_6_fu_595_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (88 downto 0);
    signal ap_condition_327 : BOOLEAN;

    component envelope_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_sitofp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        press : OUT STD_LOGIC_VECTOR (31 downto 0);
        attackDuration : OUT STD_LOGIC_VECTOR (31 downto 0);
        decayDuration : OUT STD_LOGIC_VECTOR (31 downto 0);
        sustainAmplitude : OUT STD_LOGIC_VECTOR (31 downto 0);
        sustainDuration : OUT STD_LOGIC_VECTOR (31 downto 0);
        releaseDuration : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    envelope_CTRL_BUS_s_axi_U : component envelope_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        press => press,
        attackDuration => attackDuration,
        decayDuration => decayDuration,
        sustainAmplitude => sustainAmplitude,
        sustainDuration => sustainDuration,
        releaseDuration => releaseDuration);

    envelope_fadd_32nbkb_U1 : component envelope_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_207,
        din1 => grp_fu_173_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);

    envelope_fmul_32ncud_U2 : component envelope_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_178_p0,
        din1 => grp_fu_178_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_178_p2);

    envelope_fdiv_32ndEe_U3 : component envelope_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_182_p0,
        din1 => grp_fu_182_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_182_p2);

    envelope_sitofp_3eOg_U4 : component envelope_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_187_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_187_p1);

    envelope_sitofp_3eOg_U5 : component envelope_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_191_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    wave_in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_in_V_0_ack_out) and (ap_const_logic_1 = wave_in_V_0_vld_out))) then 
                                        wave_in_V_0_sel_rd <= not(wave_in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    wave_in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_in_V_0_vld_in) and (ap_const_logic_1 = wave_in_V_0_ack_in))) then 
                                        wave_in_V_0_sel_wr <= not(wave_in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    wave_in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = wave_in_V_0_vld_in) and (ap_const_logic_1 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = wave_in_V_0_vld_in) and (wave_in_V_0_state = ap_const_lv2_2)))) then 
                    wave_in_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = wave_in_V_0_vld_in) and (ap_const_logic_0 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_1)))) then 
                    wave_in_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = wave_in_V_0_vld_in) and (wave_in_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_1)) or ((wave_in_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = wave_in_V_0_vld_in) and (ap_const_logic_0 = wave_in_V_0_ack_out))) and not(((ap_const_logic_0 = wave_in_V_0_vld_in) and (ap_const_logic_1 = wave_in_V_0_ack_out)))))) then 
                    wave_in_V_0_state <= ap_const_lv2_3;
                else 
                    wave_in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    wave_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_out_V_1_ack_out) and (ap_const_logic_1 = wave_out_V_1_vld_out))) then 
                                        wave_out_V_1_sel_rd <= not(wave_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    wave_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_logic_1 = wave_out_V_1_ack_in))) then 
                                        wave_out_V_1_sel_wr <= not(wave_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    wave_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = wave_out_V_1_vld_in) and (ap_const_logic_1 = wave_out_V_1_ack_out) and (ap_const_lv2_3 = wave_out_V_1_state)) or ((ap_const_logic_0 = wave_out_V_1_vld_in) and (ap_const_lv2_2 = wave_out_V_1_state)))) then 
                    wave_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_logic_0 = wave_out_V_1_ack_out) and (ap_const_lv2_3 = wave_out_V_1_state)) or ((ap_const_logic_0 = wave_out_V_1_ack_out) and (ap_const_lv2_1 = wave_out_V_1_state)))) then 
                    wave_out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_lv2_2 = wave_out_V_1_state)) or ((ap_const_logic_1 = wave_out_V_1_ack_out) and (ap_const_lv2_1 = wave_out_V_1_state)) or ((ap_const_lv2_3 = wave_out_V_1_state) and not(((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_logic_0 = wave_out_V_1_ack_out))) and not(((ap_const_logic_0 = wave_out_V_1_vld_in) and (ap_const_logic_1 = wave_out_V_1_ack_out)))))) then 
                    wave_out_V_1_state <= ap_const_lv2_3;
                else 
                    wave_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    releaseTime_flag_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                if ((ap_const_lv1_1 = guard_variable_for_e_3_load_fu_284_p1)) then 
                    releaseTime_flag_reg_129 <= ap_const_lv1_0;
                elsif ((ap_const_lv1_0 = guard_variable_for_e_3_load_fu_284_p1)) then 
                    releaseTime_flag_reg_129 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    releaseTime_loc_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                if ((ap_const_lv1_1 = guard_variable_for_e_3_load_fu_284_p1)) then 
                    releaseTime_loc_reg_141 <= releaseTime;
                elsif ((ap_const_lv1_0 = guard_variable_for_e_3_load_fu_284_p1)) then 
                    releaseTime_loc_reg_141 <= releaseDuration_read_reg_621;
                end if;
            end if; 
        end if;
    end process;

    sustainTime_flag_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                if ((ap_const_lv1_1 = guard_variable_for_e_4_load_fu_299_p1)) then 
                    sustainTime_flag_reg_151 <= ap_const_lv1_0;
                elsif ((ap_const_lv1_0 = guard_variable_for_e_4_load_fu_299_p1)) then 
                    sustainTime_flag_reg_151 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    sustainTime_loc_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                if ((ap_const_lv1_1 = guard_variable_for_e_4_load_fu_299_p1)) then 
                    sustainTime_loc_reg_164 <= sustainTime;
                elsif ((ap_const_lv1_0 = guard_variable_for_e_4_load_fu_299_p1)) then 
                    sustainTime_loc_reg_164 <= sustainDuration_read_reg_628;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                attackDuration_read_reg_649 <= attackDuration;
                decayDuration_read_reg_642 <= decayDuration;
                guard_variable_for_e_reg_663 <= guard_variable_for_e_4;
                press_read_reg_657 <= press;
                releaseDuration_read_reg_621 <= releaseDuration;
                sustainAmplitude_rea_reg_635 <= sustainAmplitude;
                sustainDuration_read_reg_628 <= sustainDuration;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = guard_variable_for_e_reg_663))) then
                attackSlope <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = guard_variable_for_e_1_reg_667))) then
                decaySlope <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = guard_variable_for_e_4_load_fu_299_p1))) then
                guard_variable_for_e <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = guard_variable_for_e_3_load_fu_284_p1))) then
                guard_variable_for_e_1 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                guard_variable_for_e_1_reg_667 <= guard_variable_for_e_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_0 = guard_variable_for_e_2_load_fu_259_p1))) then
                guard_variable_for_e_2 <= ap_const_lv1_1;
                tmp_11_i_reg_690 <= tmp_11_i_fu_268_p2;
                tmp_i_reg_685 <= tmp_i_fu_263_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                guard_variable_for_e_2_reg_681 <= guard_variable_for_e_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_0 = guard_variable_for_e_1_load_fu_234_p1))) then
                guard_variable_for_e_3 <= ap_const_lv1_1;
                tmp_4_i_reg_671 <= tmp_4_i_fu_238_p2;
                tmp_6_i_reg_676 <= tmp_6_i_fu_243_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_0 = guard_variable_for_e_load_fu_218_p1))) then
                guard_variable_for_e_4 <= ap_const_lv1_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state87)) then
                not_or_cond_reg_820 <= not_or_cond_fu_582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                not_tmp_4_reg_706 <= not_tmp_4_fu_313_p2;
                tmp_5_reg_712 <= tmp_5_fu_318_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state50) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790)) or ((ap_const_logic_1 = ap_CS_fsm_state74) and (ap_const_lv1_1 = sel_tmp5_reg_790)) or (ap_const_logic_1 = ap_CS_fsm_state78))) then
                reg_194 <= grp_fu_187_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state50))) then
                reg_202 <= grp_fu_191_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state78)) or ((ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state83) and (ap_const_lv1_1 = tmp_1_reg_749) and (ap_const_lv1_0 = sel_tmp2_reg_773)) or ((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state87)))) then
                reg_207 <= grp_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state83)) or ((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state83)))) then
                reg_213 <= grp_fu_173_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state66) and (ap_const_lv1_0 = guard_variable_for_e_2_reg_681))) then
                releaseSlope <= grp_fu_182_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (wave_in_V_0_vld_out = ap_const_logic_1) and (ap_const_lv1_1 = releaseTime_flag_1_fu_353_p2))) then
                releaseTime <= releaseTime_new_1_fu_359_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (wave_in_V_0_vld_out = ap_const_logic_1))) then
                releaseTime_loc_1_reg_725 <= releaseTime_loc_1_fu_366_p3;
                sustainTime_loc_1_reg_733 <= sustainTime_loc_1_fu_387_p3;
                time_load_s_reg_739 <= time_load_s_fu_406_p3;
                tmp_1_reg_749 <= tmp_1_fu_414_p2;
                tmp_22_reg_717 <= wave_in_V_0_data_out;
                tmp_9_reg_757 <= tmp_9_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state87))) then
                resultAmplitude_7_reg_825 <= resultAmplitude_7_fu_602_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                sel_tmp2_reg_773 <= sel_tmp2_fu_457_p2;
                sel_tmp3_reg_784 <= sel_tmp3_fu_520_p2;
                sel_tmp5_reg_790 <= sel_tmp5_fu_532_p2;
                sel_tmp8_reg_779 <= sel_tmp8_fu_508_p2;
                tmp_10_reg_763 <= tmp_10_fu_436_p2;
                tmp_17_reg_768 <= tmp_17_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state67) and (wave_in_V_0_vld_out = ap_const_logic_1) and (ap_const_lv1_1 = sustainTime_flag_1_fu_374_p2))) then
                sustainTime <= sustainTime_new_1_fu_380_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                time_r <= tmp_21_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_lv1_1 = tmp_1_reg_749) and (ap_const_lv1_0 = sel_tmp2_reg_773) and (ap_const_logic_1 = ap_CS_fsm_state79))) then
                tmp_2_reg_810 <= grp_fu_187_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                wait_flag_1_reg_796 <= wait_flag_1_fu_538_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state89) and (wave_out_V_1_ack_in = ap_const_logic_1) and (ap_const_lv1_1 = wait_flag_1_reg_796))) then
                wait_r <= not_or_cond_reg_820;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_in_V_0_load_A)) then
                wave_in_V_0_payload_A <= wave_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_in_V_0_load_B)) then
                wave_in_V_0_payload_B <= wave_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_out_V_1_load_A)) then
                wave_out_V_1_payload_A <= resultAmplitude_fu_609_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_out_V_1_load_B)) then
                wave_out_V_1_payload_B <= resultAmplitude_fu_609_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (wave_in_V_0_vld_out, wave_out_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state67, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state1, guard_variable_for_e_load_fu_218_p1, guard_variable_for_e_1_load_fu_234_p1, ap_CS_fsm_state22, guard_variable_for_e_2_load_fu_259_p1, ap_CS_fsm_state44)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_lv1_1 = guard_variable_for_e_load_fu_218_p1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_lv1_1 = guard_variable_for_e_1_load_fu_234_p1))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state44) and (ap_const_lv1_1 = guard_variable_for_e_2_load_fu_259_p1))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state67) and (wave_in_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state68;
                else
                    ap_NS_fsm <= ap_ST_fsm_state67;
                end if;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state88) and (wave_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_state88;
                end if;
            when ap_ST_fsm_state89 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state89) and (wave_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state89;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);

    ap_condition_327_assign_proc : process(sel_tmp2_reg_773, sel_tmp3_reg_784, sel_tmp5_reg_790)
    begin
                ap_condition_327 <= ((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_173_p1_assign_proc : process(reg_194, sel_tmp5_reg_790, ap_CS_fsm_state79, ap_condition_327)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state79)) then
            if ((ap_const_lv1_1 = sel_tmp5_reg_790)) then 
                grp_fu_173_p1 <= reg_194;
            elsif ((ap_condition_327 = ap_const_boolean_1)) then 
                grp_fu_173_p1 <= ap_const_lv32_40000000;
            else 
                grp_fu_173_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_173_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p0_assign_proc : process(attackSlope, decaySlope, releaseSlope, sel_tmp2_reg_773, sel_tmp3_reg_784, sel_tmp5_reg_790, tmp_1_reg_749, tmp_22_reg_717, ap_CS_fsm_state75, ap_CS_fsm_state80, ap_CS_fsm_state84)
    begin
        if ((((ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_lv1_1 = tmp_1_reg_749) and (ap_const_lv1_0 = sel_tmp2_reg_773) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state84) and (ap_const_lv1_1 = sel_tmp3_reg_784)) or ((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state84)))) then 
            grp_fu_178_p0 <= tmp_22_reg_717;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_178_p0 <= attackSlope;
        elsif (((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_fu_178_p0 <= releaseSlope;
        elsif (((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            grp_fu_178_p0 <= decaySlope;
        else 
            grp_fu_178_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_178_p1_assign_proc : process(reg_194, sel_tmp2_reg_773, sel_tmp3_reg_784, sel_tmp5_reg_790, reg_207, tmp_1_reg_749, reg_213, ap_CS_fsm_state75, tmp_2_reg_810, ap_CS_fsm_state80, ap_CS_fsm_state84)
    begin
        if ((((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state84)) or ((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state84)))) then 
            grp_fu_178_p1 <= reg_213;
        elsif (((ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_lv1_1 = tmp_1_reg_749) and (ap_const_lv1_0 = sel_tmp2_reg_773) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            grp_fu_178_p1 <= reg_207;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            grp_fu_178_p1 <= tmp_2_reg_810;
        elsif ((((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state75)) or ((ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state84) and (ap_const_lv1_1 = sel_tmp3_reg_784)))) then 
            grp_fu_178_p1 <= reg_194;
        else 
            grp_fu_178_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_182_p0_assign_proc : process(reg_194, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_182_p0 <= reg_194;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_182_p0 <= ap_const_lv32_40000000;
        else 
            grp_fu_182_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_182_p1_assign_proc : process(reg_194, reg_202, ap_CS_fsm_state7, ap_CS_fsm_state29, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            grp_fu_182_p1 <= reg_202;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_182_p1 <= reg_194;
        else 
            grp_fu_182_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_187_p0_assign_proc : process(attackDuration, ap_CS_fsm_state74, sel_tmp2_reg_773, sel_tmp3_reg_784, sel_tmp5_reg_790, ap_CS_fsm_state1, sustainAmplitude_rea_reg_635, tmp_4_i_reg_671, tmp_i_reg_685, time_load_s_reg_739, tmp_10_reg_763, tmp_17_reg_768, ap_CS_fsm_state69, ap_CS_fsm_state23, ap_CS_fsm_state45, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            grp_fu_187_p0 <= time_load_s_reg_739;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            grp_fu_187_p0 <= sustainAmplitude_rea_reg_635;
        elsif (((ap_const_lv1_1 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_187_p0 <= tmp_17_reg_768;
        elsif (((ap_const_lv1_1 = sel_tmp2_reg_773) and (ap_const_lv1_0 = sel_tmp3_reg_784) and (ap_const_lv1_0 = sel_tmp5_reg_790) and (ap_const_logic_1 = ap_CS_fsm_state69))) then 
            grp_fu_187_p0 <= tmp_10_reg_763;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_187_p0 <= tmp_i_reg_685;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_187_p0 <= tmp_4_i_reg_671;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_187_p0 <= attackDuration;
        else 
            grp_fu_187_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_191_p0_assign_proc : process(tmp_6_i_reg_676, tmp_11_i_reg_690, ap_CS_fsm_state23, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            grp_fu_191_p0 <= tmp_11_i_reg_690;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_191_p0 <= tmp_6_i_reg_676;
        else 
            grp_fu_191_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    guard_variable_for_e_1_load_fu_234_p1 <= guard_variable_for_e_3;
    guard_variable_for_e_2_load_fu_259_p1 <= guard_variable_for_e_2;
    guard_variable_for_e_3_load_fu_284_p1 <= guard_variable_for_e_1;
    guard_variable_for_e_4_load_fu_299_p1 <= guard_variable_for_e;
    guard_variable_for_e_load_fu_218_p1 <= guard_variable_for_e_4;
    not_or_cond_fu_582_p2 <= (or_cond2_fu_576_p2 xor ap_const_lv1_1);
    not_sel_tmp7_fu_478_p2 <= (sel_tmp6_demorgan_fu_468_p2 or tmp_19_not_fu_472_p2);
    not_sel_tmp_fu_496_p2 <= (sel_tmp13_demorgan_fu_484_p2 or tmp_21_not_fu_490_p2);
    not_tmp_4_fu_313_p2 <= "0" when (press_read_reg_657 = ap_const_lv32_0) else "1";
    not_tmp_s_fu_452_p2 <= (tmp_1_reg_749 xor ap_const_lv1_1);
    or_cond1_fu_572_p2 <= (sel_tmp2_reg_773 or tmp_1_reg_749);
    or_cond2_fu_576_p2 <= (or_cond_fu_568_p2 or or_cond1_fu_572_p2);
    or_cond_2_fu_336_p2 <= (tmp_5_reg_712 and tmp_6_fu_331_p2);
    or_cond_fu_568_p2 <= (sel_tmp5_reg_790 or sel_tmp3_reg_784);
    releaseTime_flag_1_fu_353_p2 <= (or_cond_2_fu_336_p2 or releaseTime_flag_reg_129);
    releaseTime_loc_1_fu_366_p3 <= 
        tmp_8_fu_347_p2 when (or_cond_2_fu_336_p2(0) = '1') else 
        releaseTime_loc_reg_141;
    releaseTime_new_1_fu_359_p3 <= 
        tmp_8_fu_347_p2 when (or_cond_2_fu_336_p2(0) = '1') else 
        releaseDuration_read_reg_621;
    resultAmplitude_5_fu_588_p3 <= 
        grp_fu_178_p2 when (tmp_1_reg_749(0) = '1') else 
        ap_const_lv32_0;
    resultAmplitude_6_fu_595_p3 <= 
        grp_fu_178_p2 when (sel_tmp2_reg_773(0) = '1') else 
        resultAmplitude_5_fu_588_p3;
    resultAmplitude_7_fu_602_p3 <= 
        grp_fu_178_p2 when (sel_tmp3_reg_784(0) = '1') else 
        resultAmplitude_6_fu_595_p3;
    resultAmplitude_fu_609_p3 <= 
        reg_207 when (sel_tmp5_reg_790(0) = '1') else 
        resultAmplitude_7_reg_825;
    sel_tmp13_demorgan_fu_484_p2 <= (sel_tmp6_demorgan_fu_468_p2 or tmp_14_fu_440_p2);
    sel_tmp1_fu_514_p2 <= (sel_tmp6_demorgan_fu_468_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_457_p2 <= (tmp_9_reg_757 and not_tmp_s_fu_452_p2);
    sel_tmp3_fu_520_p2 <= (tmp_14_fu_440_p2 and sel_tmp1_fu_514_p2);
    sel_tmp4_fu_526_p2 <= (sel_tmp13_demorgan_fu_484_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_532_p2 <= (tmp_16_fu_444_p2 and sel_tmp4_fu_526_p2);
    sel_tmp6_demorgan_fu_468_p2 <= (tmp_1_reg_749 or tmp_9_reg_757);
    sel_tmp8_fu_508_p2 <= (tmp1_fu_502_p2 and sel_tmp_fu_462_p2);
    sel_tmp_fu_462_p2 <= (sel_tmp2_fu_457_p2 xor not_tmp_s_fu_452_p2);
    sustainTime_flag_1_fu_374_p2 <= (or_cond_2_fu_336_p2 or sustainTime_flag_reg_151);
    sustainTime_loc_1_fu_387_p3 <= 
        tmp_7_fu_341_p2 when (or_cond_2_fu_336_p2(0) = '1') else 
        sustainTime_loc_reg_164;
    sustainTime_new_1_fu_380_p3 <= 
        tmp_7_fu_341_p2 when (or_cond_2_fu_336_p2(0) = '1') else 
        sustainDuration_read_reg_628;
    time_load_s_fu_406_p3 <= 
        time_r when (tmp_s_fu_401_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp1_fu_502_p2 <= (not_sel_tmp7_fu_478_p2 and not_sel_tmp_fu_496_p2);
    tmp_10_fu_436_p2 <= std_logic_vector(unsigned(time_load_s_reg_739) - unsigned(attackDuration_read_reg_649));
    tmp_11_i_fu_268_p2 <= std_logic_vector(unsigned(releaseDuration_read_reg_621) - unsigned(sustainDuration_read_reg_628));
    tmp_14_fu_440_p2 <= "1" when (signed(time_load_s_reg_739) < signed(sustainTime_loc_1_reg_733)) else "0";
    tmp_16_fu_444_p2 <= "1" when (signed(time_load_s_reg_739) < signed(releaseTime_loc_1_reg_725)) else "0";
    tmp_17_fu_448_p2 <= std_logic_vector(unsigned(time_load_s_reg_739) - unsigned(sustainTime_loc_1_reg_733));
    tmp_19_not_fu_472_p2 <= (tmp_14_fu_440_p2 xor ap_const_lv1_1);
    tmp_1_fu_414_p2 <= "1" when (signed(time_load_s_fu_406_p3) < signed(attackDuration_read_reg_649)) else "0";
    tmp_21_fu_542_p2 <= std_logic_vector(unsigned(time_load_s_reg_739) + unsigned(ap_const_lv32_1));
    tmp_21_not_fu_490_p2 <= (tmp_16_fu_444_p2 xor ap_const_lv1_1);
    tmp_4_fu_395_p2 <= (wait_r xor ap_const_lv1_1);
    tmp_4_i_fu_238_p2 <= std_logic_vector(unsigned(sustainAmplitude_rea_reg_635) + unsigned(ap_const_lv32_FFFFFFFE));
    tmp_5_fu_318_p2 <= "1" when (signed(press_read_reg_657) > signed(ap_const_lv32_0)) else "0";
    tmp_6_fu_331_p2 <= "1" when (signed(time_r) > signed(decayDuration_read_reg_642)) else "0";
    tmp_6_i_fu_243_p2 <= std_logic_vector(unsigned(decayDuration_read_reg_642) - unsigned(attackDuration_read_reg_649));
    tmp_7_fu_341_p2 <= std_logic_vector(unsigned(sustainTime_loc_reg_164) + unsigned(ap_const_lv32_1));
    tmp_8_fu_347_p2 <= std_logic_vector(unsigned(releaseTime_loc_reg_141) + unsigned(ap_const_lv32_1));
    tmp_9_fu_431_p2 <= "1" when (signed(time_load_s_fu_406_p3) < signed(decayDuration_read_reg_642)) else "0";
    tmp_i_fu_263_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(sustainAmplitude_rea_reg_635));
    tmp_s_fu_401_p2 <= (not_tmp_4_reg_706 or tmp_4_fu_395_p2);
    wait_flag_1_fu_538_p2 <= (not_tmp_4_reg_706 or sel_tmp8_reg_779);
    wave_in_V_0_ack_in <= wave_in_V_0_state(1);

    wave_in_V_0_ack_out_assign_proc : process(wave_in_V_0_vld_out, ap_CS_fsm_state67)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state67) and (wave_in_V_0_vld_out = ap_const_logic_1))) then 
            wave_in_V_0_ack_out <= ap_const_logic_1;
        else 
            wave_in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    wave_in_V_0_data_out_assign_proc : process(wave_in_V_0_payload_A, wave_in_V_0_payload_B, wave_in_V_0_sel)
    begin
        if ((ap_const_logic_1 = wave_in_V_0_sel)) then 
            wave_in_V_0_data_out <= wave_in_V_0_payload_B;
        else 
            wave_in_V_0_data_out <= wave_in_V_0_payload_A;
        end if; 
    end process;

    wave_in_V_0_load_A <= (wave_in_V_0_state_cmp_full and not(wave_in_V_0_sel_wr));
    wave_in_V_0_load_B <= (wave_in_V_0_sel_wr and wave_in_V_0_state_cmp_full);
    wave_in_V_0_sel <= wave_in_V_0_sel_rd;
    wave_in_V_0_state_cmp_full <= '0' when (wave_in_V_0_state = ap_const_lv2_1) else '1';
    wave_in_V_0_vld_in <= wave_in_V_TVALID;
    wave_in_V_0_vld_out <= wave_in_V_0_state(0);

    wave_in_V_TDATA_blk_n_assign_proc : process(wave_in_V_0_state, ap_CS_fsm_state67)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            wave_in_V_TDATA_blk_n <= wave_in_V_0_state(0);
        else 
            wave_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    wave_in_V_TREADY <= wave_in_V_0_state(1);
    wave_out_V_1_ack_in <= wave_out_V_1_state(1);
    wave_out_V_1_ack_out <= wave_out_V_TREADY;

    wave_out_V_1_data_out_assign_proc : process(wave_out_V_1_payload_A, wave_out_V_1_payload_B, wave_out_V_1_sel)
    begin
        if ((ap_const_logic_1 = wave_out_V_1_sel)) then 
            wave_out_V_1_data_out <= wave_out_V_1_payload_B;
        else 
            wave_out_V_1_data_out <= wave_out_V_1_payload_A;
        end if; 
    end process;

    wave_out_V_1_load_A <= (wave_out_V_1_state_cmp_full and not(wave_out_V_1_sel_wr));
    wave_out_V_1_load_B <= (wave_out_V_1_sel_wr and wave_out_V_1_state_cmp_full);
    wave_out_V_1_sel <= wave_out_V_1_sel_rd;
    wave_out_V_1_state_cmp_full <= '0' when (wave_out_V_1_state = ap_const_lv2_1) else '1';

    wave_out_V_1_vld_in_assign_proc : process(wave_out_V_1_ack_in, ap_CS_fsm_state88)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) and (wave_out_V_1_ack_in = ap_const_logic_1))) then 
            wave_out_V_1_vld_in <= ap_const_logic_1;
        else 
            wave_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    wave_out_V_1_vld_out <= wave_out_V_1_state(0);
    wave_out_V_TDATA <= wave_out_V_1_data_out;

    wave_out_V_TDATA_blk_n_assign_proc : process(wave_out_V_1_state, ap_CS_fsm_state88, ap_CS_fsm_state89)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state89))) then 
            wave_out_V_TDATA_blk_n <= wave_out_V_1_state(1);
        else 
            wave_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    wave_out_V_TVALID <= wave_out_V_1_state(0);
end behav;
