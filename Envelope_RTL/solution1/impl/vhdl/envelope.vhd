-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity envelope is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    wave_in_V_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    wave_in_V_TVALID : IN STD_LOGIC;
    wave_in_V_TREADY : OUT STD_LOGIC;
    wave_out_V_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    wave_out_V_TVALID : OUT STD_LOGIC;
    wave_out_V_TREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of envelope is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "envelope,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=5744,HLS_SYN_LUT=7312}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (45 downto 0) := "0000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (45 downto 0) := "0000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (45 downto 0) := "0000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (45 downto 0) := "0000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (45 downto 0) := "0000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (45 downto 0) := "0000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (45 downto 0) := "0000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (45 downto 0) := "0001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (45 downto 0) := "0010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (45 downto 0) := "0100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (45 downto 0) := "1000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_BF800000 : STD_LOGIC_VECTOR (31 downto 0) := "10111111100000000000000000000000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal wave_in_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_in_V_0_vld_in : STD_LOGIC;
    signal wave_in_V_0_vld_out : STD_LOGIC;
    signal wave_in_V_0_ack_in : STD_LOGIC;
    signal wave_in_V_0_ack_out : STD_LOGIC;
    signal wave_in_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_in_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_in_V_0_sel_rd : STD_LOGIC := '0';
    signal wave_in_V_0_sel_wr : STD_LOGIC := '0';
    signal wave_in_V_0_sel : STD_LOGIC;
    signal wave_in_V_0_load_A : STD_LOGIC;
    signal wave_in_V_0_load_B : STD_LOGIC;
    signal wave_in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal wave_in_V_0_state_cmp_full : STD_LOGIC;
    signal wave_out_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_out_V_1_vld_in : STD_LOGIC;
    signal wave_out_V_1_vld_out : STD_LOGIC;
    signal wave_out_V_1_ack_in : STD_LOGIC;
    signal wave_out_V_1_ack_out : STD_LOGIC;
    signal wave_out_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_out_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal wave_out_V_1_sel_rd : STD_LOGIC := '0';
    signal wave_out_V_1_sel_wr : STD_LOGIC := '0';
    signal wave_out_V_1_sel : STD_LOGIC;
    signal wave_out_V_1_load_A : STD_LOGIC;
    signal wave_out_V_1_load_B : STD_LOGIC;
    signal wave_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal wave_out_V_1_state_cmp_full : STD_LOGIC;
    signal press : STD_LOGIC_VECTOR (31 downto 0);
    signal attackDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal decayDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainAmplitude : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseDuration : STD_LOGIC_VECTOR (31 downto 0);
    signal lastpress : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal releaseTime : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sustainTime : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wait_r : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal time_r : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal wave_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (45 downto 0) := "0000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal wave_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_148_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_14_reg_699 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal sel_tmp2_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_793 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal releaseDuration_read_reg_605 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sustainAmplitude_rea_reg_614 : STD_LOGIC_VECTOR (31 downto 0);
    signal decayDuration_read_reg_622 : STD_LOGIC_VECTOR (31 downto 0);
    signal attackDuration_read_reg_630 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_638 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_643 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_tmp_s_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal releaseTime_flag_1_s_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal releaseTime_flag_1_s_reg_662 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_246_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_250_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_671 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal time_load_s_fu_268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal time_load_s_reg_688 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_151_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_30_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sustainAmplitude_ass_fu_332_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainAmplitude_ass_reg_727 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_cond_4_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_4_reg_733 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal attackSlope_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_140_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal decaySlope_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseSlope_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_new_1_tm_fu_413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_new_1_tm_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_760 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal tmp_24_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wait_flag_1_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wait_flag_1_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal not_or_cond_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_or_cond_reg_809 : STD_LOGIC_VECTOR (0 downto 0);
    signal resultAmplitude_7_fu_586_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal resultAmplitude_7_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal resultAmplitude_fu_593_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_new_1_re_fu_401_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_541_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_125_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_125_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_fu_131_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_148_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_33_fu_212_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_222_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_34_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_232_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_to_int_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_neg_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_295_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_305_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_351_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_load_tmp_fu_362_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_load_rel_fu_356_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_new_1_fu_381_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_loc_1_fu_387_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sustainTime_new_1_fu_394_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal releaseTime_loc_1_re_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal not_tmp_1_fu_453_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp6_demorgan_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_not_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp13_demorgan_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_not_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp7_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_sel_tmp_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp4_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond1_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond2_fu_560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal resultAmplitude_5_fu_572_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal resultAmplitude_6_fu_579_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (45 downto 0);

    component envelope_fadd_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_fmul_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_fdiv_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_sitofp_3eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component envelope_fcmp_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component envelope_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        press : OUT STD_LOGIC_VECTOR (31 downto 0);
        attackDuration : OUT STD_LOGIC_VECTOR (31 downto 0);
        decayDuration : OUT STD_LOGIC_VECTOR (31 downto 0);
        sustainAmplitude : OUT STD_LOGIC_VECTOR (31 downto 0);
        releaseDuration : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    envelope_CTRL_BUS_s_axi_U : component envelope_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        press => press,
        attackDuration => attackDuration,
        decayDuration => decayDuration,
        sustainAmplitude => sustainAmplitude,
        releaseDuration => releaseDuration);

    envelope_fadd_32nbkb_U1 : component envelope_fadd_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_125_p0,
        din1 => grp_fu_125_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_125_p2);

    envelope_fmul_32ncud_U2 : component envelope_fmul_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_131_p0,
        din1 => grp_fu_131_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_131_p2);

    envelope_fdiv_32ndEe_U3 : component envelope_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => ap_const_lv32_3F800000,
        din1 => reg_162,
        ce => ap_const_logic_1,
        dout => grp_fu_135_p2);

    envelope_fdiv_32ndEe_U4 : component envelope_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => reg_168,
        din1 => tmp_4_reg_707,
        ce => ap_const_logic_1,
        dout => grp_fu_140_p2);

    envelope_fdiv_32ndEe_U5 : component envelope_fdiv_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_144_p0,
        din1 => tmp_7_reg_712,
        ce => ap_const_logic_1,
        dout => grp_fu_144_p2);

    envelope_sitofp_3eOg_U6 : component envelope_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_148_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p1);

    envelope_sitofp_3eOg_U7 : component envelope_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_3_reg_666,
        ce => ap_const_logic_1,
        dout => grp_fu_151_p1);

    envelope_sitofp_3eOg_U8 : component envelope_sitofp_3eOg
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_6_reg_671,
        ce => ap_const_logic_1,
        dout => grp_fu_154_p1);

    envelope_fcmp_32nfYi_U9 : component envelope_fcmp_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => sustainAmplitude_rea_reg_614,
        din1 => ap_const_lv32_3F800000,
        opcode => ap_const_lv5_2,
        dout => tmp_30_fu_157_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    wave_in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_in_V_0_ack_out) and (ap_const_logic_1 = wave_in_V_0_vld_out))) then 
                                        wave_in_V_0_sel_rd <= not(wave_in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    wave_in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_in_V_0_vld_in) and (ap_const_logic_1 = wave_in_V_0_ack_in))) then 
                                        wave_in_V_0_sel_wr <= not(wave_in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    wave_in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = wave_in_V_0_vld_in) and (ap_const_logic_1 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = wave_in_V_0_vld_in) and (wave_in_V_0_state = ap_const_lv2_2)))) then 
                    wave_in_V_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = wave_in_V_0_vld_in) and (ap_const_logic_0 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_1)))) then 
                    wave_in_V_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = wave_in_V_0_vld_in) and (wave_in_V_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = wave_in_V_0_ack_out) and (wave_in_V_0_state = ap_const_lv2_1)) or ((wave_in_V_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = wave_in_V_0_vld_in) and (ap_const_logic_0 = wave_in_V_0_ack_out))) and not(((ap_const_logic_0 = wave_in_V_0_vld_in) and (ap_const_logic_1 = wave_in_V_0_ack_out)))))) then 
                    wave_in_V_0_state <= ap_const_lv2_3;
                else 
                    wave_in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    wave_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_out_V_1_ack_out) and (ap_const_logic_1 = wave_out_V_1_vld_out))) then 
                                        wave_out_V_1_sel_rd <= not(wave_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    wave_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_logic_1 = wave_out_V_1_ack_in))) then 
                                        wave_out_V_1_sel_wr <= not(wave_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    wave_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                wave_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = wave_out_V_1_vld_in) and (ap_const_logic_1 = wave_out_V_1_ack_out) and (ap_const_lv2_3 = wave_out_V_1_state)) or ((ap_const_logic_0 = wave_out_V_1_vld_in) and (ap_const_lv2_2 = wave_out_V_1_state)))) then 
                    wave_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_logic_0 = wave_out_V_1_ack_out) and (ap_const_lv2_3 = wave_out_V_1_state)) or ((ap_const_logic_0 = wave_out_V_1_ack_out) and (ap_const_lv2_1 = wave_out_V_1_state)))) then 
                    wave_out_V_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_lv2_2 = wave_out_V_1_state)) or ((ap_const_logic_1 = wave_out_V_1_ack_out) and (ap_const_lv2_1 = wave_out_V_1_state)) or ((ap_const_lv2_3 = wave_out_V_1_state) and not(((ap_const_logic_1 = wave_out_V_1_vld_in) and (ap_const_logic_0 = wave_out_V_1_ack_out))) and not(((ap_const_logic_0 = wave_out_V_1_vld_in) and (ap_const_logic_1 = wave_out_V_1_ack_out)))))) then 
                    wave_out_V_1_state <= ap_const_lv2_3;
                else 
                    wave_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                attackDuration_read_reg_630 <= attackDuration;
                decayDuration_read_reg_622 <= decayDuration;
                lastpress <= press;
                not_tmp_s_reg_656 <= not_tmp_s_fu_206_p2;
                releaseDuration_read_reg_605 <= releaseDuration;
                releaseTime_flag_1_s_reg_662 <= releaseTime_flag_1_s_fu_240_p2;
                sustainAmplitude_rea_reg_614 <= sustainAmplitude;
                tmp_9_reg_638 <= tmp_9_fu_184_p2;
                tmp_s_reg_643 <= tmp_s_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_logic_1 = ap_CS_fsm_state24))) then
                attackSlope_reg_739 <= grp_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                decaySlope_reg_744 <= grp_fu_140_p2;
                releaseSlope_reg_749 <= grp_fu_144_p2;
                sustainTime_new_1_tm_reg_754 <= sustainTime_new_1_tm_fu_413_p3;
                tmp_17_reg_760 <= tmp_17_fu_432_p2;
                tmp_23_reg_766 <= tmp_23_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                not_or_cond_reg_809 <= not_or_cond_fu_566_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                or_cond_4_reg_733 <= or_cond_4_fu_339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = tmp_14_reg_699)) or ((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_lv1_1 = sel_tmp5_reg_799)))) then
                reg_162 <= grp_fu_148_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state40)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state40)))) then
                reg_168 <= grp_fu_125_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then
                reg_174 <= grp_fu_131_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = releaseTime_flag_1_s_reg_662))) then
                releaseTime <= releaseTime_new_1_re_fu_401_p3;
                sustainTime <= sustainTime_new_1_tm_fu_413_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                resultAmplitude_7_reg_814 <= resultAmplitude_7_fu_586_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                sel_tmp2_reg_782 <= sel_tmp2_fu_458_p2;
                sel_tmp3_reg_793 <= sel_tmp3_fu_520_p2;
                sel_tmp5_reg_799 <= sel_tmp5_fu_532_p2;
                sel_tmp8_reg_788 <= sel_tmp8_fu_508_p2;
                tmp_18_reg_772 <= tmp_18_fu_441_p2;
                tmp_24_reg_777 <= tmp_24_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                sustainAmplitude_ass_reg_727 <= sustainAmplitude_ass_fu_332_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (wave_in_V_0_vld_out = ap_const_logic_1))) then
                time_load_s_reg_688 <= time_load_s_fu_268_p3;
                tmp_13_reg_681 <= tmp_13_fu_259_p2;
                tmp_14_reg_699 <= tmp_14_fu_276_p2;
                tmp_38_reg_676 <= wave_in_V_0_data_out;
                tmp_3_reg_666 <= tmp_3_fu_246_p2;
                tmp_6_reg_671 <= tmp_6_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                time_r <= tmp_29_fu_541_p2;
                wait_flag_1_reg_805 <= wait_flag_1_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_30_reg_717 <= tmp_30_fu_157_p2;
                tmp_4_reg_707 <= grp_fu_151_p1;
                tmp_7_reg_712 <= grp_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (wave_out_V_1_ack_in = ap_const_logic_1) and (ap_const_lv1_1 = wait_flag_1_reg_805))) then
                wait_r <= not_or_cond_reg_809;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_in_V_0_load_A)) then
                wave_in_V_0_payload_A <= wave_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_in_V_0_load_B)) then
                wave_in_V_0_payload_B <= wave_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_out_V_1_load_A)) then
                wave_out_V_1_payload_A <= resultAmplitude_fu_593_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = wave_out_V_1_load_B)) then
                wave_out_V_1_payload_B <= resultAmplitude_fu_593_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (wave_in_V_0_vld_out, wave_out_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (wave_in_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state45) and (wave_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (wave_out_V_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_125_p0_assign_proc : process(sel_tmp2_reg_782, sel_tmp3_reg_793, sel_tmp5_reg_799, reg_174, sustainAmplitude_rea_reg_614, ap_CS_fsm_state4, ap_CS_fsm_state36)
    begin
        if ((((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state36)))) then 
            grp_fu_125_p0 <= reg_174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_125_p0 <= sustainAmplitude_rea_reg_614;
        else 
            grp_fu_125_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_125_p1_assign_proc : process(sel_tmp2_reg_782, sel_tmp3_reg_793, sel_tmp5_reg_799, sustainAmplitude_ass_reg_727, ap_CS_fsm_state4, ap_CS_fsm_state36)
    begin
        if (((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_125_p1 <= sustainAmplitude_ass_reg_727;
        elsif (((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
            grp_fu_125_p1 <= ap_const_lv32_3F800000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_125_p1 <= ap_const_lv32_BF800000;
        else 
            grp_fu_125_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_131_p0_assign_proc : process(tmp_14_reg_699, sel_tmp2_reg_782, sel_tmp3_reg_793, sel_tmp5_reg_799, tmp_38_reg_676, attackSlope_reg_739, decaySlope_reg_744, releaseSlope_reg_749, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        if ((((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_1 = sel_tmp3_reg_793)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_131_p0 <= tmp_38_reg_676;
        elsif (((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_131_p0 <= releaseSlope_reg_749;
        elsif (((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_131_p0 <= decaySlope_reg_744;
        elsif (((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            grp_fu_131_p0 <= attackSlope_reg_739;
        else 
            grp_fu_131_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_131_p1_assign_proc : process(reg_162, tmp_14_reg_699, sel_tmp2_reg_782, sel_tmp3_reg_793, sel_tmp5_reg_799, reg_168, reg_174, sustainAmplitude_ass_reg_727, ap_CS_fsm_state32, ap_CS_fsm_state41)
    begin
        if (((ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state41) and (ap_const_lv1_1 = sel_tmp3_reg_793))) then 
            grp_fu_131_p1 <= sustainAmplitude_ass_reg_727;
        elsif ((((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state41)))) then 
            grp_fu_131_p1 <= reg_168;
        elsif (((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state41))) then 
            grp_fu_131_p1 <= reg_174;
        elsif ((((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state32)) or ((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            grp_fu_131_p1 <= reg_162;
        else 
            grp_fu_131_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_144_p0 <= tmp_5_neg_fu_284_p2;

    grp_fu_148_p0_assign_proc : process(tmp_14_reg_699, sel_tmp2_reg_782, sel_tmp3_reg_793, sel_tmp5_reg_799, attackDuration_read_reg_630, time_load_s_reg_688, tmp_18_reg_772, tmp_24_reg_777, ap_CS_fsm_state26, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_148_p0 <= tmp_24_reg_777;
        elsif (((ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_lv1_1 = sel_tmp2_reg_782) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_148_p0 <= tmp_18_reg_772;
        elsif (((ap_const_lv1_1 = tmp_14_reg_699) and (ap_const_lv1_0 = sel_tmp2_reg_782) and (ap_const_lv1_0 = sel_tmp3_reg_793) and (ap_const_lv1_0 = sel_tmp5_reg_799) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            grp_fu_148_p0 <= time_load_s_reg_688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_148_p0 <= attackDuration_read_reg_630;
        else 
            grp_fu_148_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    not_or_cond_fu_566_p2 <= (or_cond2_fu_560_p2 xor ap_const_lv1_1);
    not_sel_tmp7_fu_479_p2 <= (sel_tmp6_demorgan_fu_469_p2 or tmp_22_not_fu_473_p2);
    not_sel_tmp_fu_496_p2 <= (sel_tmp13_demorgan_fu_485_p2 or tmp_23_not_fu_491_p2);
    not_tmp_1_fu_453_p2 <= (tmp_14_reg_699 xor ap_const_lv1_1);
    not_tmp_s_fu_206_p2 <= (tmp_s_fu_190_p2 xor ap_const_lv1_1);
    notlhs_fu_309_p2 <= "0" when (tmp_8_fu_295_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_315_p2 <= "1" when (tmp_fu_305_p1 = ap_const_lv23_0) else "0";
    or_cond1_fu_556_p2 <= (sel_tmp2_reg_782 or tmp_14_reg_699);
    or_cond2_fu_560_p2 <= (or_cond_fu_552_p2 or or_cond1_fu_556_p2);
    or_cond_4_fu_339_p2 <= (tmp_9_reg_638 or tmp_s_reg_643);
    or_cond_fu_552_p2 <= (sel_tmp5_reg_799 or sel_tmp3_reg_793);
    releaseTime_flag_1_s_fu_240_p2 <= "1" when (tmp_36_fu_232_p3 = ap_const_lv32_0) else "0";
    releaseTime_load_rel_fu_356_p3 <= 
        releaseTime when (or_cond_4_reg_733(0) = '1') else 
        releaseDuration_read_reg_605;
    releaseTime_loc_1_fu_387_p3 <= 
        releaseTime when (tmp_s_reg_643(0) = '1') else 
        tmp_12_fu_375_p2;
    releaseTime_loc_1_re_fu_407_p3 <= 
        releaseTime_loc_1_fu_387_p3 when (tmp_13_reg_681(0) = '1') else 
        releaseDuration_read_reg_605;
    releaseTime_new_1_fu_381_p3 <= 
        releaseDuration_read_reg_605 when (tmp_s_reg_643(0) = '1') else 
        tmp_12_fu_375_p2;
    releaseTime_new_1_re_fu_401_p3 <= 
        releaseTime_new_1_fu_381_p3 when (tmp_13_reg_681(0) = '1') else 
        releaseDuration_read_reg_605;
    resultAmplitude_5_fu_572_p3 <= 
        grp_fu_131_p2 when (tmp_14_reg_699(0) = '1') else 
        ap_const_lv32_0;
    resultAmplitude_6_fu_579_p3 <= 
        grp_fu_131_p2 when (sel_tmp2_reg_782(0) = '1') else 
        resultAmplitude_5_fu_572_p3;
    resultAmplitude_7_fu_586_p3 <= 
        grp_fu_131_p2 when (sel_tmp3_reg_793(0) = '1') else 
        resultAmplitude_6_fu_579_p3;
    resultAmplitude_fu_593_p3 <= 
        reg_174 when (sel_tmp5_reg_799(0) = '1') else 
        resultAmplitude_7_reg_814;
    sel_tmp13_demorgan_fu_485_p2 <= (sel_tmp6_demorgan_fu_469_p2 or tmp_22_fu_445_p2);
    sel_tmp1_fu_514_p2 <= (sel_tmp6_demorgan_fu_469_p2 xor ap_const_lv1_1);
    sel_tmp2_fu_458_p2 <= (tmp_17_reg_760 and not_tmp_1_fu_453_p2);
    sel_tmp3_fu_520_p2 <= (tmp_22_fu_445_p2 and sel_tmp1_fu_514_p2);
    sel_tmp4_fu_526_p2 <= (sel_tmp13_demorgan_fu_485_p2 xor ap_const_lv1_1);
    sel_tmp5_fu_532_p2 <= (tmp_23_reg_766 and sel_tmp4_fu_526_p2);
    sel_tmp6_demorgan_fu_469_p2 <= (tmp_14_reg_699 or tmp_17_reg_760);
    sel_tmp8_fu_508_p2 <= (tmp1_fu_502_p2 and sel_tmp_fu_463_p2);
    sel_tmp_fu_463_p2 <= (sel_tmp2_fu_458_p2 xor not_tmp_1_fu_453_p2);
    sustainAmplitude_ass_fu_332_p3 <= 
        ap_const_lv32_3F800000 when (tmp_31_fu_327_p2(0) = '1') else 
        sustainAmplitude_rea_reg_614;
    sustainTime_load_tmp_fu_362_p3 <= 
        sustainTime when (or_cond_4_reg_733(0) = '1') else 
        tmp_10_fu_351_p2;
    sustainTime_new_1_fu_394_p3 <= 
        sustainTime when (tmp_s_reg_643(0) = '1') else 
        tmp_11_fu_369_p2;
    sustainTime_new_1_tm_fu_413_p3 <= 
        sustainTime_new_1_fu_394_p3 when (tmp_13_reg_681(0) = '1') else 
        tmp_10_fu_351_p2;
    time_load_s_fu_268_p3 <= 
        time_r when (tmp_13_fu_259_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp1_fu_502_p2 <= (not_sel_tmp7_fu_479_p2 and not_sel_tmp_fu_496_p2);
    tmp_10_fu_351_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(decayDuration_read_reg_622));
    tmp_11_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(sustainTime_load_tmp_fu_362_p3));
    tmp_12_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(releaseTime_load_rel_fu_356_p3));
    tmp_13_fu_259_p2 <= (tmp_32_fu_254_p2 or not_tmp_s_reg_656);
    tmp_14_fu_276_p2 <= "1" when (signed(time_load_s_fu_268_p3) < signed(attackDuration_read_reg_630)) else "0";
    tmp_17_fu_432_p2 <= "1" when (signed(time_load_s_reg_688) < signed(decayDuration_read_reg_622)) else "0";
    tmp_18_fu_441_p2 <= std_logic_vector(unsigned(time_load_s_reg_688) - unsigned(attackDuration_read_reg_630));
    tmp_22_fu_445_p2 <= "1" when (signed(time_load_s_reg_688) < signed(sustainTime_new_1_tm_reg_754)) else "0";
    tmp_22_not_fu_473_p2 <= (tmp_22_fu_445_p2 xor ap_const_lv1_1);
    tmp_23_fu_436_p2 <= "1" when (signed(time_load_s_reg_688) < signed(releaseTime_loc_1_re_fu_407_p3)) else "0";
    tmp_23_not_fu_491_p2 <= (tmp_23_reg_766 xor ap_const_lv1_1);
    tmp_24_fu_449_p2 <= std_logic_vector(unsigned(time_load_s_reg_688) - unsigned(sustainTime_new_1_tm_reg_754));
    tmp_28_fu_321_p2 <= (notrhs_fu_315_p2 or notlhs_fu_309_p2);
    tmp_29_fu_541_p2 <= std_logic_vector(unsigned(time_load_s_reg_688) + unsigned(ap_const_lv32_1));
    tmp_31_fu_327_p2 <= (tmp_28_fu_321_p2 and tmp_30_reg_717);
    tmp_32_fu_254_p2 <= (wait_r xor ap_const_lv1_1);
    tmp_33_fu_212_p1 <= press(1 - 1 downto 0);
    tmp_34_fu_216_p2 <= (tmp_33_fu_212_p1 or wait_r);
    tmp_35_fu_222_p4 <= press(31 downto 1);
    tmp_36_fu_232_p3 <= (tmp_35_fu_222_p4 & tmp_34_fu_216_p2);
    tmp_3_fu_246_p2 <= std_logic_vector(unsigned(decayDuration_read_reg_622) - unsigned(attackDuration_read_reg_630));
    tmp_5_neg_fu_284_p2 <= (tmp_5_to_int_fu_281_p1 xor ap_const_lv32_80000000);
    tmp_5_to_int_fu_281_p1 <= sustainAmplitude_rea_reg_614;
    tmp_6_fu_250_p2 <= std_logic_vector(unsigned(releaseDuration_read_reg_605) - unsigned(decayDuration_read_reg_622));
    tmp_8_fu_295_p4 <= tmp_5_to_int_fu_281_p1(30 downto 23);
    tmp_9_fu_184_p2 <= "0" when (lastpress = ap_const_lv32_0) else "1";
    tmp_fu_305_p1 <= tmp_5_to_int_fu_281_p1(23 - 1 downto 0);
    tmp_s_fu_190_p2 <= "1" when (press = ap_const_lv32_0) else "0";
    wait_flag_1_fu_537_p2 <= (sel_tmp8_reg_788 or not_tmp_s_reg_656);
    wave_in_V_0_ack_in <= wave_in_V_0_state(1);

    wave_in_V_0_ack_out_assign_proc : process(wave_in_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (wave_in_V_0_vld_out = ap_const_logic_1))) then 
            wave_in_V_0_ack_out <= ap_const_logic_1;
        else 
            wave_in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    wave_in_V_0_data_out_assign_proc : process(wave_in_V_0_payload_A, wave_in_V_0_payload_B, wave_in_V_0_sel)
    begin
        if ((ap_const_logic_1 = wave_in_V_0_sel)) then 
            wave_in_V_0_data_out <= wave_in_V_0_payload_B;
        else 
            wave_in_V_0_data_out <= wave_in_V_0_payload_A;
        end if; 
    end process;

    wave_in_V_0_load_A <= (wave_in_V_0_state_cmp_full and not(wave_in_V_0_sel_wr));
    wave_in_V_0_load_B <= (wave_in_V_0_sel_wr and wave_in_V_0_state_cmp_full);
    wave_in_V_0_sel <= wave_in_V_0_sel_rd;
    wave_in_V_0_state_cmp_full <= '0' when (wave_in_V_0_state = ap_const_lv2_1) else '1';
    wave_in_V_0_vld_in <= wave_in_V_TVALID;
    wave_in_V_0_vld_out <= wave_in_V_0_state(0);

    wave_in_V_TDATA_blk_n_assign_proc : process(wave_in_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            wave_in_V_TDATA_blk_n <= wave_in_V_0_state(0);
        else 
            wave_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    wave_in_V_TREADY <= wave_in_V_0_state(1);
    wave_out_V_1_ack_in <= wave_out_V_1_state(1);
    wave_out_V_1_ack_out <= wave_out_V_TREADY;

    wave_out_V_1_data_out_assign_proc : process(wave_out_V_1_payload_A, wave_out_V_1_payload_B, wave_out_V_1_sel)
    begin
        if ((ap_const_logic_1 = wave_out_V_1_sel)) then 
            wave_out_V_1_data_out <= wave_out_V_1_payload_B;
        else 
            wave_out_V_1_data_out <= wave_out_V_1_payload_A;
        end if; 
    end process;

    wave_out_V_1_load_A <= (wave_out_V_1_state_cmp_full and not(wave_out_V_1_sel_wr));
    wave_out_V_1_load_B <= (wave_out_V_1_sel_wr and wave_out_V_1_state_cmp_full);
    wave_out_V_1_sel <= wave_out_V_1_sel_rd;
    wave_out_V_1_state_cmp_full <= '0' when (wave_out_V_1_state = ap_const_lv2_1) else '1';

    wave_out_V_1_vld_in_assign_proc : process(wave_out_V_1_ack_in, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) and (wave_out_V_1_ack_in = ap_const_logic_1))) then 
            wave_out_V_1_vld_in <= ap_const_logic_1;
        else 
            wave_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    wave_out_V_1_vld_out <= wave_out_V_1_state(0);
    wave_out_V_TDATA <= wave_out_V_1_data_out;

    wave_out_V_TDATA_blk_n_assign_proc : process(wave_out_V_1_state, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            wave_out_V_TDATA_blk_n <= wave_out_V_1_state(1);
        else 
            wave_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    wave_out_V_TVALID <= wave_out_V_1_state(0);
end behav;
